//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 49 storyboards.
  struct storyboard {
    /// Storyboard `AboutUsStoryboard`.
    static let aboutUsStoryboard = _R.storyboard.aboutUsStoryboard()
    /// Storyboard `AddressesStoryboard`.
    static let addressesStoryboard = _R.storyboard.addressesStoryboard()
    /// Storyboard `CartStoryboard`.
    static let cartStoryboard = _R.storyboard.cartStoryboard()
    /// Storyboard `CategoryDetailsStoryboard`.
    static let categoryDetailsStoryboard = _R.storyboard.categoryDetailsStoryboard()
    /// Storyboard `CategoryFilterStoryboard`.
    static let categoryFilterStoryboard = _R.storyboard.categoryFilterStoryboard()
    /// Storyboard `CompleteRegisterStoryboard`.
    static let completeRegisterStoryboard = _R.storyboard.completeRegisterStoryboard()
    /// Storyboard `ContactUsStoryboard`.
    static let contactUsStoryboard = _R.storyboard.contactUsStoryboard()
    /// Storyboard `CreateAddressStoryboard`.
    static let createAddressStoryboard = _R.storyboard.createAddressStoryboard()
    /// Storyboard `DeliveryServiceStoryboard`.
    static let deliveryServiceStoryboard = _R.storyboard.deliveryServiceStoryboard()
    /// Storyboard `DeliveryTypeStoryboard`.
    static let deliveryTypeStoryboard = _R.storyboard.deliveryTypeStoryboard()
    /// Storyboard `EditProfileStoryboard`.
    static let editProfileStoryboard = _R.storyboard.editProfileStoryboard()
    /// Storyboard `FaqStoryboard`.
    static let faqStoryboard = _R.storyboard.faqStoryboard()
    /// Storyboard `FavoritesStoryboard`.
    static let favoritesStoryboard = _R.storyboard.favoritesStoryboard()
    /// Storyboard `ForgetPasswordStoryboard`.
    static let forgetPasswordStoryboard = _R.storyboard.forgetPasswordStoryboard()
    /// Storyboard `HomeStoryboard`.
    static let homeStoryboard = _R.storyboard.homeStoryboard()
    /// Storyboard `ImageDisplayController`.
    static let imageDisplayController = _R.storyboard.imageDisplayController()
    /// Storyboard `LangIntroStoryboard`.
    static let langIntroStoryboard = _R.storyboard.langIntroStoryboard()
    /// Storyboard `LanguageStoryboard`.
    static let languageStoryboard = _R.storyboard.languageStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LocationFromMapStoryboard`.
    static let locationFromMapStoryboard = _R.storyboard.locationFromMapStoryboard()
    /// Storyboard `LoginStoryboard`.
    static let loginStoryboard = _R.storyboard.loginStoryboard()
    /// Storyboard `MakeOrderDoneStoryboard`.
    static let makeOrderDoneStoryboard = _R.storyboard.makeOrderDoneStoryboard()
    /// Storyboard `MealDetailsStoryboard`.
    static let mealDetailsStoryboard = _R.storyboard.mealDetailsStoryboard()
    /// Storyboard `MealExtrasStoryboard`.
    static let mealExtrasStoryboard = _R.storyboard.mealExtrasStoryboard()
    /// Storyboard `MealFilterStoryboard`.
    static let mealFilterStoryboard = _R.storyboard.mealFilterStoryboard()
    /// Storyboard `Menu`.
    static let menu = _R.storyboard.menu()
    /// Storyboard `NotificationsStoryboard`.
    static let notificationsStoryboard = _R.storyboard.notificationsStoryboard()
    /// Storyboard `OnBoardingStoryboard`.
    static let onBoardingStoryboard = _R.storyboard.onBoardingStoryboard()
    /// Storyboard `OrderDetailsStoryboard`.
    static let orderDetailsStoryboard = _R.storyboard.orderDetailsStoryboard()
    /// Storyboard `OrdersStoryboard`.
    static let ordersStoryboard = _R.storyboard.ordersStoryboard()
    /// Storyboard `PickTimeController`.
    static let pickTimeController = _R.storyboard.pickTimeController()
    /// Storyboard `PickerViewHelper`.
    static let pickerViewHelper = _R.storyboard.pickerViewHelper()
    /// Storyboard `ProfileStoryboard`.
    static let profileStoryboard = _R.storyboard.profileStoryboard()
    /// Storyboard `ProviderDetailsStoryboard`.
    static let providerDetailsStoryboard = _R.storyboard.providerDetailsStoryboard()
    /// Storyboard `ProviderMealsStoryboard`.
    static let providerMealsStoryboard = _R.storyboard.providerMealsStoryboard()
    /// Storyboard `ProviderRatesStoryboard`.
    static let providerRatesStoryboard = _R.storyboard.providerRatesStoryboard()
    /// Storyboard `ReOrderStoryboard`.
    static let reOrderStoryboard = _R.storyboard.reOrderStoryboard()
    /// Storyboard `RegisterStoryboard`.
    static let registerStoryboard = _R.storyboard.registerStoryboard()
    /// Storyboard `ReservationDetailsStoryboard`.
    static let reservationDetailsStoryboard = _R.storyboard.reservationDetailsStoryboard()
    /// Storyboard `ReservationTableDoneStoryboard`.
    static let reservationTableDoneStoryboard = _R.storyboard.reservationTableDoneStoryboard()
    /// Storyboard `ReservationTableStoryboard`.
    static let reservationTableStoryboard = _R.storyboard.reservationTableStoryboard()
    /// Storyboard `ReservationTypeStoryboard`.
    static let reservationTypeStoryboard = _R.storyboard.reservationTypeStoryboard()
    /// Storyboard `ReservationsFilterStoryboard`.
    static let reservationsFilterStoryboard = _R.storyboard.reservationsFilterStoryboard()
    /// Storyboard `ReservationsStoryboard`.
    static let reservationsStoryboard = _R.storyboard.reservationsStoryboard()
    /// Storyboard `ResetPasswordStoryboard`.
    static let resetPasswordStoryboard = _R.storyboard.resetPasswordStoryboard()
    /// Storyboard `SearchFilterStoryboard`.
    static let searchFilterStoryboard = _R.storyboard.searchFilterStoryboard()
    /// Storyboard `SearchStoryboard`.
    static let searchStoryboard = _R.storyboard.searchStoryboard()
    /// Storyboard `VerifyCodeStoryboard`.
    static let verifyCodeStoryboard = _R.storyboard.verifyCodeStoryboard()
    /// Storyboard `WebViewStoryboard`.
    static let webViewStoryboard = _R.storyboard.webViewStoryboard()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AboutUsStoryboard", bundle: ...)`
    static func aboutUsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.aboutUsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddressesStoryboard", bundle: ...)`
    static func addressesStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addressesStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CartStoryboard", bundle: ...)`
    static func cartStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cartStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CategoryDetailsStoryboard", bundle: ...)`
    static func categoryDetailsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.categoryDetailsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CategoryFilterStoryboard", bundle: ...)`
    static func categoryFilterStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.categoryFilterStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CompleteRegisterStoryboard", bundle: ...)`
    static func completeRegisterStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.completeRegisterStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ContactUsStoryboard", bundle: ...)`
    static func contactUsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.contactUsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CreateAddressStoryboard", bundle: ...)`
    static func createAddressStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createAddressStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DeliveryServiceStoryboard", bundle: ...)`
    static func deliveryServiceStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.deliveryServiceStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DeliveryTypeStoryboard", bundle: ...)`
    static func deliveryTypeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.deliveryTypeStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EditProfileStoryboard", bundle: ...)`
    static func editProfileStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.editProfileStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FaqStoryboard", bundle: ...)`
    static func faqStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.faqStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FavoritesStoryboard", bundle: ...)`
    static func favoritesStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.favoritesStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ForgetPasswordStoryboard", bundle: ...)`
    static func forgetPasswordStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forgetPasswordStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeStoryboard", bundle: ...)`
    static func homeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ImageDisplayController", bundle: ...)`
    static func imageDisplayController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.imageDisplayController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LangIntroStoryboard", bundle: ...)`
    static func langIntroStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.langIntroStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LanguageStoryboard", bundle: ...)`
    static func languageStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.languageStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LocationFromMapStoryboard", bundle: ...)`
    static func locationFromMapStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.locationFromMapStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LoginStoryboard", bundle: ...)`
    static func loginStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MakeOrderDoneStoryboard", bundle: ...)`
    static func makeOrderDoneStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.makeOrderDoneStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MealDetailsStoryboard", bundle: ...)`
    static func mealDetailsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mealDetailsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MealExtrasStoryboard", bundle: ...)`
    static func mealExtrasStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mealExtrasStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MealFilterStoryboard", bundle: ...)`
    static func mealFilterStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mealFilterStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Menu", bundle: ...)`
    static func menu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NotificationsStoryboard", bundle: ...)`
    static func notificationsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notificationsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OnBoardingStoryboard", bundle: ...)`
    static func onBoardingStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onBoardingStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OrderDetailsStoryboard", bundle: ...)`
    static func orderDetailsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.orderDetailsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OrdersStoryboard", bundle: ...)`
    static func ordersStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ordersStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PickTimeController", bundle: ...)`
    static func pickTimeController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pickTimeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PickerViewHelper", bundle: ...)`
    static func pickerViewHelper(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pickerViewHelper)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileStoryboard", bundle: ...)`
    static func profileStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProviderDetailsStoryboard", bundle: ...)`
    static func providerDetailsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.providerDetailsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProviderMealsStoryboard", bundle: ...)`
    static func providerMealsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.providerMealsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProviderRatesStoryboard", bundle: ...)`
    static func providerRatesStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.providerRatesStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ReOrderStoryboard", bundle: ...)`
    static func reOrderStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reOrderStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RegisterStoryboard", bundle: ...)`
    static func registerStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registerStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ReservationDetailsStoryboard", bundle: ...)`
    static func reservationDetailsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reservationDetailsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ReservationTableDoneStoryboard", bundle: ...)`
    static func reservationTableDoneStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reservationTableDoneStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ReservationTableStoryboard", bundle: ...)`
    static func reservationTableStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reservationTableStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ReservationTypeStoryboard", bundle: ...)`
    static func reservationTypeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reservationTypeStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ReservationsFilterStoryboard", bundle: ...)`
    static func reservationsFilterStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reservationsFilterStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ReservationsStoryboard", bundle: ...)`
    static func reservationsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reservationsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ResetPasswordStoryboard", bundle: ...)`
    static func resetPasswordStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.resetPasswordStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SearchFilterStoryboard", bundle: ...)`
    static func searchFilterStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchFilterStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SearchStoryboard", bundle: ...)`
    static func searchStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "VerifyCodeStoryboard", bundle: ...)`
    static func verifyCodeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.verifyCodeStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "WebViewStoryboard", bundle: ...)`
    static func webViewStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.webViewStoryboard)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 24 colors.
  struct color {
    /// Color `BlueGradient1`.
    static let blueGradient1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueGradient1")
    /// Color `BlueGradient2`.
    static let blueGradient2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueGradient2")
    /// Color `BorderColor1`.
    static let borderColor1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "BorderColor1")
    /// Color `BorderColor2`.
    static let borderColor2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "BorderColor2")
    /// Color `FourthColor`.
    static let fourthColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "FourthColor")
    /// Color `OrangGradient1`.
    static let orangGradient1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "OrangGradient1")
    /// Color `OrangGradient2`.
    static let orangGradient2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "OrangGradient2")
    /// Color `RedGradient1`.
    static let redGradient1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedGradient1")
    /// Color `RedGradient2`.
    static let redGradient2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedGradient2")
    /// Color `WhiteColor`.
    static let whiteColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "WhiteColor")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `mainColor`.
    static let mainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainColor")
    /// Color `secondColor`.
    static let secondColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondColor")
    /// Color `secondTextColor`.
    static let secondTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondTextColor")
    /// Color `shadowColorOrange`.
    static let shadowColorOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadowColorOrange")
    /// Color `shadowColorRed`.
    static let shadowColorRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadowColorRed")
    /// Color `shadowColorYellow`.
    static let shadowColorYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadowColorYellow")
    /// Color `shadowColor`.
    static let shadowColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadowColor")
    /// Color `starEmptyColor`.
    static let starEmptyColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "starEmptyColor")
    /// Color `textColor-3`.
    static let textColor3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "textColor-3")
    /// Color `textColor-blue`.
    static let textColorBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "textColor-blue")
    /// Color `textColor`.
    static let textColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textColor")
    /// Color `thirdColor`.
    static let thirdColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "thirdColor")
    /// Color `thirdTextColor`.
    static let thirdTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "thirdTextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueGradient1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueGradient1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueGradient1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueGradient2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueGradient2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueGradient2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BorderColor1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func borderColor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.borderColor1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BorderColor2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func borderColor2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.borderColor2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FourthColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func fourthColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.fourthColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OrangGradient1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangGradient1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangGradient1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OrangGradient2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangGradient2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangGradient2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedGradient1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redGradient1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redGradient1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedGradient2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redGradient2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redGradient2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "WhiteColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadowColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadowColorOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowColorOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowColorOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadowColorRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowColorRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowColorRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadowColorYellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowColorYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowColorYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "starEmptyColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func starEmptyColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.starEmptyColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textColor-3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textColor-blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColorBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColorBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "thirdColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thirdColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thirdColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "thirdTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thirdTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thirdTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlueGradient1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueGradient1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueGradient1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlueGradient2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueGradient2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueGradient2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BorderColor1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func borderColor1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.borderColor1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BorderColor2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func borderColor2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.borderColor2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "FourthColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func fourthColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.fourthColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "OrangGradient1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orangGradient1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orangGradient1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "OrangGradient2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orangGradient2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orangGradient2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RedGradient1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func redGradient1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.redGradient1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RedGradient2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func redGradient2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.redGradient2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "WhiteColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func whiteColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.whiteColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadowColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadowColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadowColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadowColorOrange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadowColorOrange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadowColorOrange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadowColorRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadowColorRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadowColorRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadowColorYellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadowColorYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadowColorYellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "starEmptyColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func starEmptyColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.starEmptyColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textColor-3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textColor3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textColor3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textColor-blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textColorBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textColorBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "thirdColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func thirdColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.thirdColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "thirdTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func thirdTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.thirdTextColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `AlGhadTV-Bold.ttf`.
    static let alGhadTVBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AlGhadTV-Bold", pathExtension: "ttf")
    /// Resource file `AlGhadTV-Regular.ttf`.
    static let alGhadTVRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AlGhadTV-Regular", pathExtension: "ttf")
    /// Resource file `AraHamahHoms-Regular.ttf`.
    static let araHamahHomsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AraHamahHoms-Regular", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `loading.json`.
    static let loadingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading", pathExtension: "json")
    /// Resource file `loading1.json`.
    static let loading1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading1", pathExtension: "json")
    /// Resource file `loading2.json`.
    static let loading2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading2", pathExtension: "json")
    /// Resource file `loading3.json`.
    static let loading3Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading3", pathExtension: "json")
    /// Resource file `loading4.json`.
    static let loading4Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading4", pathExtension: "json")

    /// `bundle.url(forResource: "AlGhadTV-Bold", withExtension: "ttf")`
    static func alGhadTVBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alGhadTVBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AlGhadTV-Regular", withExtension: "ttf")`
    static func alGhadTVRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alGhadTVRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AraHamahHoms-Regular", withExtension: "ttf")`
    static func araHamahHomsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.araHamahHomsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading", withExtension: "json")`
    static func loadingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loadingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading1", withExtension: "json")`
    static func loading1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading2", withExtension: "json")`
    static func loading2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading2Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading3", withExtension: "json")`
    static func loading3Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading3Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading4", withExtension: "json")`
    static func loading4Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading4Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `AlGhadTV-Bold`.
    static let alGhadTVBold = Rswift.FontResource(fontName: "AlGhadTV-Bold")
    /// Font `AlGhadTV`.
    static let alGhadTV = Rswift.FontResource(fontName: "AlGhadTV")
    /// Font `AraHamahHoms-Regular`.
    static let araHamahHomsRegular = Rswift.FontResource(fontName: "AraHamahHoms-Regular")

    /// `UIFont(name: "AlGhadTV", size: ...)`
    static func alGhadTV(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alGhadTV, size: size)
    }

    /// `UIFont(name: "AlGhadTV-Bold", size: ...)`
    static func alGhadTVBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alGhadTVBold, size: size)
    }

    /// `UIFont(name: "AraHamahHoms-Regular", size: ...)`
    static func araHamahHomsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: araHamahHomsRegular, size: size)
    }

    static func validate() throws {
      if R.font.alGhadTV(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlGhadTV' could not be loaded, is 'AlGhadTV-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alGhadTVBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlGhadTV-Bold' could not be loaded, is 'AlGhadTV-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.araHamahHomsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AraHamahHoms-Regular' could not be loaded, is 'AraHamahHoms-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 191 images.
  struct image {
    /// Image `076d506b2c5e606e82bf26462bf5f8e7`.
    static let d506b2c5e606e82bf26462bf5f8e7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "076d506b2c5e606e82bf26462bf5f8e7")
    /// Image `299b538d1d69ae20db0a83028ee65bda`.
    static let b538d1d69ae20db0a83028ee65bda = Rswift.ImageResource(bundle: R.hostingBundle, name: "299b538d1d69ae20db0a83028ee65bda")
    /// Image `384427745a5c82ffe8adc3bcea0be560`.
    static let a5c82ffe8adc3bcea0be560 = Rswift.ImageResource(bundle: R.hostingBundle, name: "384427745a5c82ffe8adc3bcea0be560")
    /// Image `8c511dbf22ba8f978649331291232129-1`.
    static let c511dbf22ba8f9786493312912321291 = Rswift.ImageResource(bundle: R.hostingBundle, name: "8c511dbf22ba8f978649331291232129-1")
    /// Image `8c511dbf22ba8f978649331291232129`.
    static let c511dbf22ba8f978649331291232129 = Rswift.ImageResource(bundle: R.hostingBundle, name: "8c511dbf22ba8f978649331291232129")
    /// Image `About us`.
    static let aboutUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "About us")
    /// Image `AdsImage`.
    static let adsImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "AdsImage")
    /// Image `Burger`.
    static let burger = Rswift.ImageResource(bundle: R.hostingBundle, name: "Burger")
    /// Image `Change langauge`.
    static let changeLangauge = Rswift.ImageResource(bundle: R.hostingBundle, name: "Change langauge")
    /// Image `Contact us`.
    static let contactUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "Contact us")
    /// Image `Group 2510`.
    static let group2510 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2510")
    /// Image `Group 2542-1`.
    static let group25421 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2542-1")
    /// Image `Group 2542`.
    static let group2542 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2542")
    /// Image `Group 2543`.
    static let group2543 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2543")
    /// Image `Group 2544`.
    static let group2544 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2544")
    /// Image `Group 2559`.
    static let group2559 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2559")
    /// Image `Group 2562`.
    static let group2562 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2562")
    /// Image `Group 2565`.
    static let group2565 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2565")
    /// Image `Group 2587`.
    static let group2587 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2587")
    /// Image `Group 2597`.
    static let group2597 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2597")
    /// Image `Group 2607`.
    static let group2607 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2607")
    /// Image `Group 2608`.
    static let group2608 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2608")
    /// Image `Group 2609`.
    static let group2609 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2609")
    /// Image `Group 2610`.
    static let group2610 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2610")
    /// Image `Group 2611`.
    static let group2611 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2611")
    /// Image `Group 2612`.
    static let group2612 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2612")
    /// Image `Group 2613`.
    static let group2613 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2613")
    /// Image `Group 2614`.
    static let group2614 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2614")
    /// Image `Group 2615`.
    static let group2615 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2615")
    /// Image `Group 2616`.
    static let group2616 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2616")
    /// Image `Group 2617`.
    static let group2617 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2617")
    /// Image `Group 2618`.
    static let group2618 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2618")
    /// Image `Group 2620`.
    static let group2620 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2620")
    /// Image `Group 2621`.
    static let group2621 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2621")
    /// Image `Group 2622`.
    static let group2622 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2622")
    /// Image `Group 2624`.
    static let group2624 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2624")
    /// Image `Group 2625`.
    static let group2625 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2625")
    /// Image `Group 2626`.
    static let group2626 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2626")
    /// Image `Group 2627`.
    static let group2627 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2627")
    /// Image `Group 2628`.
    static let group2628 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2628")
    /// Image `Group 2629`.
    static let group2629 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2629")
    /// Image `Group 2636`.
    static let group2636 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2636")
    /// Image `Group 2637`.
    static let group2637 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2637")
    /// Image `Group 2640`.
    static let group2640 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2640")
    /// Image `Group 2641`.
    static let group2641 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2641")
    /// Image `Group 2643`.
    static let group2643 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2643")
    /// Image `Group 2644`.
    static let group2644 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2644")
    /// Image `Group 2645`.
    static let group2645 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2645")
    /// Image `Group 2646`.
    static let group2646 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2646")
    /// Image `Group 2647`.
    static let group2647 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2647")
    /// Image `Group 2648`.
    static let group2648 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2648")
    /// Image `Group 2649`.
    static let group2649 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2649")
    /// Image `Group 2657`.
    static let group2657 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2657")
    /// Image `Group 2658`.
    static let group2658 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2658")
    /// Image `Group 2660`.
    static let group2660 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2660")
    /// Image `Group 2661`.
    static let group2661 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2661")
    /// Image `Group 2692`.
    static let group2692 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2692")
    /// Image `Group 2696`.
    static let group2696 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 2696")
    /// Image `Group 58`.
    static let group58 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 58")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `Icon awesome-coins`.
    static let iconAwesomeCoins = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon awesome-coins")
    /// Image `Icon awesome-instagram`.
    static let iconAwesomeInstagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon awesome-instagram")
    /// Image `Icon awesome-money-bill-alt`.
    static let iconAwesomeMoneyBillAlt = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon awesome-money-bill-alt")
    /// Image `Icon feather-facebook`.
    static let iconFeatherFacebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon feather-facebook")
    /// Image `Icon ionic-ios-log-in`.
    static let iconIonicIosLogIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon ionic-ios-log-in")
    /// Image `Icon ionic-md-card`.
    static let iconIonicMdCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon ionic-md-card")
    /// Image `Icon material-cancel-1`.
    static let iconMaterialCancel1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon material-cancel-1")
    /// Image `Icon material-cancel`.
    static let iconMaterialCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon material-cancel")
    /// Image `Icon material-local-offer`.
    static let iconMaterialLocalOffer = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon material-local-offer")
    /// Image `Iconly-Light-Calendar-1`.
    static let iconlyLightCalendar1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Calendar-1")
    /// Image `Iconly-Light-Calendar`.
    static let iconlyLightCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Calendar")
    /// Image `Iconly-Light-Chart`.
    static let iconlyLightChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Chart")
    /// Image `Iconly-Light-Document`.
    static let iconlyLightDocument = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Document")
    /// Image `Iconly-Light-Graph`.
    static let iconlyLightGraph = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Graph")
    /// Image `Iconly-Light-Heart-1`.
    static let iconlyLightHeart1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Heart-1")
    /// Image `Iconly-Light-Heart`.
    static let iconlyLightHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Heart")
    /// Image `Iconly-Light-Home`.
    static let iconlyLightHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Home")
    /// Image `Iconly-Light-Location`.
    static let iconlyLightLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Location")
    /// Image `Iconly-Light-Notification`.
    static let iconlyLightNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Notification")
    /// Image `Iconly-Light-Profile`.
    static let iconlyLightProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Profile")
    /// Image `Iconly-Light-Search-1`.
    static let iconlyLightSearch1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Search-1")
    /// Image `Iconly-Light-Search-2`.
    static let iconlyLightSearch2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Search-2")
    /// Image `Iconly-Light-Search`.
    static let iconlyLightSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Search")
    /// Image `Iconly-Light-Setting`.
    static let iconlyLightSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "Iconly-Light-Setting")
    /// Image `Layer 2-10`.
    static let layer210 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-10")
    /// Image `Layer 2-11`.
    static let layer211 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-11")
    /// Image `Layer 2-1`.
    static let layer21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-1")
    /// Image `Layer 2-2`.
    static let layer22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-2")
    /// Image `Layer 2-3`.
    static let layer23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-3")
    /// Image `Layer 2-4`.
    static let layer24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-4")
    /// Image `Layer 2-5`.
    static let layer25 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-5")
    /// Image `Layer 2-6`.
    static let layer26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-6")
    /// Image `Layer 2-7`.
    static let layer27 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-7")
    /// Image `Layer 2-8`.
    static let layer28 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-8")
    /// Image `Layer 2-9`.
    static let layer29 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2-9")
    /// Image `Layer 2`.
    static let layer2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Layer 2")
    /// Image `LogoNameWhite`.
    static let logoNameWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "LogoNameWhite")
    /// Image `Logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logout")
    /// Image `Mask Group 14`.
    static let maskGroup14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mask Group 14")
    /// Image `Mask Group 23`.
    static let maskGroup23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mask Group 23")
    /// Image `Mask Group 24`.
    static let maskGroup24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mask Group 24")
    /// Image `Mask Group 29`.
    static let maskGroup29 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mask Group 29")
    /// Image `Mask Group 33`.
    static let maskGroup33 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mask Group 33")
    /// Image `Offline`.
    static let offline = Rswift.ImageResource(bundle: R.hostingBundle, name: "Offline")
    /// Image `Orders`.
    static let orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "Orders")
    /// Image `Packages`.
    static let packages = Rswift.ImageResource(bundle: R.hostingBundle, name: "Packages")
    /// Image `PointScore`.
    static let pointScore = Rswift.ImageResource(bundle: R.hostingBundle, name: "PointScore")
    /// Image `Qr Code`.
    static let qrCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "Qr Code")
    /// Image `Service Provider information`.
    static let serviceProviderInformation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Service Provider information")
    /// Image `Settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings")
    /// Image `Usage and Privacy Policy`.
    static let usageAndPrivacyPolicy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Usage and Privacy Policy")
    /// Image `Wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "Wallet")
    /// Image `a8cf0f598d527900aec8cec5d4ec8171`.
    static let a8cf0f598d527900aec8cec5d4ec8171 = Rswift.ImageResource(bundle: R.hostingBundle, name: "a8cf0f598d527900aec8cec5d4ec8171")
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `address`.
    static let address = Rswift.ImageResource(bundle: R.hostingBundle, name: "address")
    /// Image `appBackground2`.
    static let appBackground2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "appBackground2")
    /// Image `appBackgroundWithoutAPPName`.
    static let appBackgroundWithoutAPPName = Rswift.ImageResource(bundle: R.hostingBundle, name: "appBackgroundWithoutAPPName")
    /// Image `appBackground`.
    static let appBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "appBackground")
    /// Image `arrow-down`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down")
    /// Image `arrow-left`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-left")
    /// Image `back-black`.
    static let backBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "back-black")
    /// Image `back-white`.
    static let backWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "back-white")
    /// Image `box`.
    static let box = Rswift.ImageResource(bundle: R.hostingBundle, name: "box")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `cards`.
    static let cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "cards")
    /// Image `cbfcdd6a66b50b4827d9c1d3210c2782`.
    static let cbfcdd6a66b50b4827d9c1d3210c2782 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cbfcdd6a66b50b4827d9c1d3210c2782")
    /// Image `checkBox`.
    static let checkBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkBox")
    /// Image `createBT`.
    static let createBT = Rswift.ImageResource(bundle: R.hostingBundle, name: "createBT")
    /// Image `crown`.
    static let crown = Rswift.ImageResource(bundle: R.hostingBundle, name: "crown")
    /// Image `diet`.
    static let diet = Rswift.ImageResource(bundle: R.hostingBundle, name: "diet")
    /// Image `editProfile`.
    static let editProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "editProfile")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `favoriteOrange`.
    static let favoriteOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "favoriteOrange")
    /// Image `fire-1`.
    static let fire1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fire-1")
    /// Image `fire`.
    static let fire = Rswift.ImageResource(bundle: R.hostingBundle, name: "fire")
    /// Image `gallery`.
    static let gallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "gallery")
    /// Image `gift`.
    static let gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift")
    /// Image `gps`.
    static let gps = Rswift.ImageResource(bundle: R.hostingBundle, name: "gps")
    /// Image `group55`.
    static let group55 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group55")
    /// Image `lanchScreen`.
    static let lanchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "lanchScreen")
    /// Image `locationNVGIcon`.
    static let locationNVGIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationNVGIcon")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `logo-1`.
    static let logo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-1")
    /// Image `logo-small`.
    static let logoSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-small")
    /// Image `logoName`.
    static let logoName = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoName")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `lunchScreen`.
    static let lunchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "lunchScreen")
    /// Image `mastercard`.
    static let mastercard = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard")
    /// Image `microphone-black-shape-1`.
    static let microphoneBlackShape1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "microphone-black-shape-1")
    /// Image `microphone-black-shape`.
    static let microphoneBlackShape = Rswift.ImageResource(bundle: R.hostingBundle, name: "microphone-black-shape")
    /// Image `money-bag`.
    static let moneyBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "money-bag")
    /// Image `myAddress`.
    static let myAddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "myAddress")
    /// Image `onBoarding1`.
    static let onBoarding1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onBoarding1")
    /// Image `onBoarding2`.
    static let onBoarding2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onBoarding2")
    /// Image `onBoarding3`.
    static let onBoarding3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onBoarding3")
    /// Image `ordersBG-1`.
    static let ordersBG1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ordersBG-1")
    /// Image `ordersBG`.
    static let ordersBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "ordersBG")
    /// Image `ordersIcon`.
    static let ordersIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ordersIcon")
    /// Image `packageBG-1`.
    static let packageBG1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "packageBG-1")
    /// Image `packageBG`.
    static let packageBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "packageBG")
    /// Image `packageIcon`.
    static let packageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "packageIcon")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `phone-call`.
    static let phoneCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone-call")
    /// Image `photo-camera`.
    static let photoCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo-camera")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `points`.
    static let points = Rswift.ImageResource(bundle: R.hostingBundle, name: "points")
    /// Image `profileImage`.
    static let profileImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileImage")
    /// Image `providerInfoBG`.
    static let providerInfoBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "providerInfoBG")
    /// Image `providerInfoIcon`.
    static let providerInfoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "providerInfoIcon")
    /// Image `providerInformations`.
    static let providerInformations = Rswift.ImageResource(bundle: R.hostingBundle, name: "providerInformations")
    /// Image `radio-button-2`.
    static let radioButton2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio-button-2")
    /// Image `radio-button`.
    static let radioButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio-button")
    /// Image `radio`.
    static let radio = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio")
    /// Image `returnWallet`.
    static let returnWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "returnWallet")
    /// Image `shopping-bag`.
    static let shoppingBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-bag")
    /// Image `snapchat`.
    static let snapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "snapchat")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `storeReport-1`.
    static let storeReport1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "storeReport-1")
    /// Image `storeReportIcon`.
    static let storeReportIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "storeReportIcon")
    /// Image `storeReport`.
    static let storeReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "storeReport")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `tray-1`.
    static let tray1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tray-1")
    /// Image `tray`.
    static let tray = Rswift.ImageResource(bundle: R.hostingBundle, name: "tray")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    /// Image `unRedDot`.
    static let unRedDot = Rswift.ImageResource(bundle: R.hostingBundle, name: "unRedDot")
    /// Image `upload`.
    static let upload = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `welcome-1`.
    static let welcome1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome-1")
    /// Image `welcome-2`.
    static let welcome2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome-2")
    /// Image `welcome-3`.
    static let welcome3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome-3")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "076d506b2c5e606e82bf26462bf5f8e7", bundle: ..., traitCollection: ...)`
    static func d506b2c5e606e82bf26462bf5f8e7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.d506b2c5e606e82bf26462bf5f8e7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "299b538d1d69ae20db0a83028ee65bda", bundle: ..., traitCollection: ...)`
    static func b538d1d69ae20db0a83028ee65bda(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.b538d1d69ae20db0a83028ee65bda, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "384427745a5c82ffe8adc3bcea0be560", bundle: ..., traitCollection: ...)`
    static func a5c82ffe8adc3bcea0be560(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.a5c82ffe8adc3bcea0be560, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "8c511dbf22ba8f978649331291232129", bundle: ..., traitCollection: ...)`
    static func c511dbf22ba8f978649331291232129(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.c511dbf22ba8f978649331291232129, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "8c511dbf22ba8f978649331291232129-1", bundle: ..., traitCollection: ...)`
    static func c511dbf22ba8f9786493312912321291(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.c511dbf22ba8f9786493312912321291, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "About us", bundle: ..., traitCollection: ...)`
    static func aboutUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutUs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AdsImage", bundle: ..., traitCollection: ...)`
    static func adsImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.adsImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Burger", bundle: ..., traitCollection: ...)`
    static func burger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Change langauge", bundle: ..., traitCollection: ...)`
    static func changeLangauge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeLangauge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Contact us", bundle: ..., traitCollection: ...)`
    static func contactUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactUs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2510", bundle: ..., traitCollection: ...)`
    static func group2510(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2510, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2542", bundle: ..., traitCollection: ...)`
    static func group2542(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2542, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2542-1", bundle: ..., traitCollection: ...)`
    static func group25421(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group25421, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2543", bundle: ..., traitCollection: ...)`
    static func group2543(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2543, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2544", bundle: ..., traitCollection: ...)`
    static func group2544(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2544, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2559", bundle: ..., traitCollection: ...)`
    static func group2559(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2559, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2562", bundle: ..., traitCollection: ...)`
    static func group2562(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2562, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2565", bundle: ..., traitCollection: ...)`
    static func group2565(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2565, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2587", bundle: ..., traitCollection: ...)`
    static func group2587(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2587, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2597", bundle: ..., traitCollection: ...)`
    static func group2597(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2597, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2607", bundle: ..., traitCollection: ...)`
    static func group2607(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2607, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2608", bundle: ..., traitCollection: ...)`
    static func group2608(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2608, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2609", bundle: ..., traitCollection: ...)`
    static func group2609(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2609, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2610", bundle: ..., traitCollection: ...)`
    static func group2610(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2610, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2611", bundle: ..., traitCollection: ...)`
    static func group2611(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2611, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2612", bundle: ..., traitCollection: ...)`
    static func group2612(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2612, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2613", bundle: ..., traitCollection: ...)`
    static func group2613(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2613, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2614", bundle: ..., traitCollection: ...)`
    static func group2614(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2614, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2615", bundle: ..., traitCollection: ...)`
    static func group2615(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2615, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2616", bundle: ..., traitCollection: ...)`
    static func group2616(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2616, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2617", bundle: ..., traitCollection: ...)`
    static func group2617(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2617, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2618", bundle: ..., traitCollection: ...)`
    static func group2618(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2618, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2620", bundle: ..., traitCollection: ...)`
    static func group2620(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2620, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2621", bundle: ..., traitCollection: ...)`
    static func group2621(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2621, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2622", bundle: ..., traitCollection: ...)`
    static func group2622(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2622, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2624", bundle: ..., traitCollection: ...)`
    static func group2624(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2624, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2625", bundle: ..., traitCollection: ...)`
    static func group2625(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2625, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2626", bundle: ..., traitCollection: ...)`
    static func group2626(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2626, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2627", bundle: ..., traitCollection: ...)`
    static func group2627(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2627, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2628", bundle: ..., traitCollection: ...)`
    static func group2628(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2628, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2629", bundle: ..., traitCollection: ...)`
    static func group2629(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2629, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2636", bundle: ..., traitCollection: ...)`
    static func group2636(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2636, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2637", bundle: ..., traitCollection: ...)`
    static func group2637(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2637, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2640", bundle: ..., traitCollection: ...)`
    static func group2640(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2640, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2641", bundle: ..., traitCollection: ...)`
    static func group2641(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2641, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2643", bundle: ..., traitCollection: ...)`
    static func group2643(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2643, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2644", bundle: ..., traitCollection: ...)`
    static func group2644(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2644, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2645", bundle: ..., traitCollection: ...)`
    static func group2645(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2645, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2646", bundle: ..., traitCollection: ...)`
    static func group2646(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2646, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2647", bundle: ..., traitCollection: ...)`
    static func group2647(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2647, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2648", bundle: ..., traitCollection: ...)`
    static func group2648(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2648, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2649", bundle: ..., traitCollection: ...)`
    static func group2649(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2649, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2657", bundle: ..., traitCollection: ...)`
    static func group2657(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2657, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2658", bundle: ..., traitCollection: ...)`
    static func group2658(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2658, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2660", bundle: ..., traitCollection: ...)`
    static func group2660(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2660, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2661", bundle: ..., traitCollection: ...)`
    static func group2661(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2661, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2692", bundle: ..., traitCollection: ...)`
    static func group2692(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2692, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 2696", bundle: ..., traitCollection: ...)`
    static func group2696(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2696, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 58", bundle: ..., traitCollection: ...)`
    static func group58(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group58, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon awesome-coins", bundle: ..., traitCollection: ...)`
    static func iconAwesomeCoins(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAwesomeCoins, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon awesome-instagram", bundle: ..., traitCollection: ...)`
    static func iconAwesomeInstagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAwesomeInstagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon awesome-money-bill-alt", bundle: ..., traitCollection: ...)`
    static func iconAwesomeMoneyBillAlt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAwesomeMoneyBillAlt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon feather-facebook", bundle: ..., traitCollection: ...)`
    static func iconFeatherFacebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconFeatherFacebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon ionic-ios-log-in", bundle: ..., traitCollection: ...)`
    static func iconIonicIosLogIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconIonicIosLogIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon ionic-md-card", bundle: ..., traitCollection: ...)`
    static func iconIonicMdCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconIonicMdCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon material-cancel", bundle: ..., traitCollection: ...)`
    static func iconMaterialCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMaterialCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon material-cancel-1", bundle: ..., traitCollection: ...)`
    static func iconMaterialCancel1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMaterialCancel1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon material-local-offer", bundle: ..., traitCollection: ...)`
    static func iconMaterialLocalOffer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMaterialLocalOffer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Calendar", bundle: ..., traitCollection: ...)`
    static func iconlyLightCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightCalendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Calendar-1", bundle: ..., traitCollection: ...)`
    static func iconlyLightCalendar1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightCalendar1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Chart", bundle: ..., traitCollection: ...)`
    static func iconlyLightChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightChart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Document", bundle: ..., traitCollection: ...)`
    static func iconlyLightDocument(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightDocument, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Graph", bundle: ..., traitCollection: ...)`
    static func iconlyLightGraph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightGraph, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Heart", bundle: ..., traitCollection: ...)`
    static func iconlyLightHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightHeart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Heart-1", bundle: ..., traitCollection: ...)`
    static func iconlyLightHeart1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightHeart1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Home", bundle: ..., traitCollection: ...)`
    static func iconlyLightHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Location", bundle: ..., traitCollection: ...)`
    static func iconlyLightLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Notification", bundle: ..., traitCollection: ...)`
    static func iconlyLightNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Profile", bundle: ..., traitCollection: ...)`
    static func iconlyLightProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Search", bundle: ..., traitCollection: ...)`
    static func iconlyLightSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Search-1", bundle: ..., traitCollection: ...)`
    static func iconlyLightSearch1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightSearch1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Search-2", bundle: ..., traitCollection: ...)`
    static func iconlyLightSearch2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightSearch2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Iconly-Light-Setting", bundle: ..., traitCollection: ...)`
    static func iconlyLightSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconlyLightSetting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2", bundle: ..., traitCollection: ...)`
    static func layer2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-1", bundle: ..., traitCollection: ...)`
    static func layer21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer21, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-10", bundle: ..., traitCollection: ...)`
    static func layer210(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer210, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-11", bundle: ..., traitCollection: ...)`
    static func layer211(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer211, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-2", bundle: ..., traitCollection: ...)`
    static func layer22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer22, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-3", bundle: ..., traitCollection: ...)`
    static func layer23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer23, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-4", bundle: ..., traitCollection: ...)`
    static func layer24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-5", bundle: ..., traitCollection: ...)`
    static func layer25(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer25, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-6", bundle: ..., traitCollection: ...)`
    static func layer26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-7", bundle: ..., traitCollection: ...)`
    static func layer27(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer27, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-8", bundle: ..., traitCollection: ...)`
    static func layer28(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer28, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Layer 2-9", bundle: ..., traitCollection: ...)`
    static func layer29(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layer29, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LogoNameWhite", bundle: ..., traitCollection: ...)`
    static func logoNameWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoNameWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mask Group 14", bundle: ..., traitCollection: ...)`
    static func maskGroup14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maskGroup14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mask Group 23", bundle: ..., traitCollection: ...)`
    static func maskGroup23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maskGroup23, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mask Group 24", bundle: ..., traitCollection: ...)`
    static func maskGroup24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maskGroup24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mask Group 29", bundle: ..., traitCollection: ...)`
    static func maskGroup29(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maskGroup29, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mask Group 33", bundle: ..., traitCollection: ...)`
    static func maskGroup33(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maskGroup33, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Offline", bundle: ..., traitCollection: ...)`
    static func offline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Orders", bundle: ..., traitCollection: ...)`
    static func orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Packages", bundle: ..., traitCollection: ...)`
    static func packages(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.packages, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PointScore", bundle: ..., traitCollection: ...)`
    static func pointScore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pointScore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Qr Code", bundle: ..., traitCollection: ...)`
    static func qrCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Service Provider information", bundle: ..., traitCollection: ...)`
    static func serviceProviderInformation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.serviceProviderInformation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Usage and Privacy Policy", bundle: ..., traitCollection: ...)`
    static func usageAndPrivacyPolicy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usageAndPrivacyPolicy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "a8cf0f598d527900aec8cec5d4ec8171", bundle: ..., traitCollection: ...)`
    static func a8cf0f598d527900aec8cec5d4ec8171(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.a8cf0f598d527900aec8cec5d4ec8171, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "address", bundle: ..., traitCollection: ...)`
    static func address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appBackground", bundle: ..., traitCollection: ...)`
    static func appBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appBackground2", bundle: ..., traitCollection: ...)`
    static func appBackground2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appBackground2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appBackgroundWithoutAPPName", bundle: ..., traitCollection: ...)`
    static func appBackgroundWithoutAPPName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appBackgroundWithoutAPPName, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-down", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-left", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back-black", bundle: ..., traitCollection: ...)`
    static func backBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back-white", bundle: ..., traitCollection: ...)`
    static func backWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "box", bundle: ..., traitCollection: ...)`
    static func box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.box, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cards", bundle: ..., traitCollection: ...)`
    static func cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cbfcdd6a66b50b4827d9c1d3210c2782", bundle: ..., traitCollection: ...)`
    static func cbfcdd6a66b50b4827d9c1d3210c2782(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cbfcdd6a66b50b4827d9c1d3210c2782, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkBox", bundle: ..., traitCollection: ...)`
    static func checkBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "createBT", bundle: ..., traitCollection: ...)`
    static func createBT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.createBT, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crown", bundle: ..., traitCollection: ...)`
    static func crown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "diet", bundle: ..., traitCollection: ...)`
    static func diet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editProfile", bundle: ..., traitCollection: ...)`
    static func editProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favoriteOrange", bundle: ..., traitCollection: ...)`
    static func favoriteOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fire", bundle: ..., traitCollection: ...)`
    static func fire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fire-1", bundle: ..., traitCollection: ...)`
    static func fire1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gallery", bundle: ..., traitCollection: ...)`
    static func gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gift", bundle: ..., traitCollection: ...)`
    static func gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gps", bundle: ..., traitCollection: ...)`
    static func gps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group55", bundle: ..., traitCollection: ...)`
    static func group55(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group55, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lanchScreen", bundle: ..., traitCollection: ...)`
    static func lanchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lanchScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationNVGIcon", bundle: ..., traitCollection: ...)`
    static func locationNVGIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationNVGIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo-1", bundle: ..., traitCollection: ...)`
    static func logo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo-small", bundle: ..., traitCollection: ...)`
    static func logoSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoName", bundle: ..., traitCollection: ...)`
    static func logoName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoName, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lunchScreen", bundle: ..., traitCollection: ...)`
    static func lunchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lunchScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard", bundle: ..., traitCollection: ...)`
    static func mastercard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "microphone-black-shape", bundle: ..., traitCollection: ...)`
    static func microphoneBlackShape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.microphoneBlackShape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "microphone-black-shape-1", bundle: ..., traitCollection: ...)`
    static func microphoneBlackShape1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.microphoneBlackShape1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "money-bag", bundle: ..., traitCollection: ...)`
    static func moneyBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyBag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myAddress", bundle: ..., traitCollection: ...)`
    static func myAddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myAddress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onBoarding1", bundle: ..., traitCollection: ...)`
    static func onBoarding1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onBoarding2", bundle: ..., traitCollection: ...)`
    static func onBoarding2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onBoarding3", bundle: ..., traitCollection: ...)`
    static func onBoarding3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoarding3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ordersBG", bundle: ..., traitCollection: ...)`
    static func ordersBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ordersBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ordersBG-1", bundle: ..., traitCollection: ...)`
    static func ordersBG1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ordersBG1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ordersIcon", bundle: ..., traitCollection: ...)`
    static func ordersIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ordersIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "packageBG", bundle: ..., traitCollection: ...)`
    static func packageBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.packageBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "packageBG-1", bundle: ..., traitCollection: ...)`
    static func packageBG1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.packageBG1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "packageIcon", bundle: ..., traitCollection: ...)`
    static func packageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.packageIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone-call", bundle: ..., traitCollection: ...)`
    static func phoneCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo-camera", bundle: ..., traitCollection: ...)`
    static func photoCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoCamera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "points", bundle: ..., traitCollection: ...)`
    static func points(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.points, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileImage", bundle: ..., traitCollection: ...)`
    static func profileImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "providerInfoBG", bundle: ..., traitCollection: ...)`
    static func providerInfoBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.providerInfoBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "providerInfoIcon", bundle: ..., traitCollection: ...)`
    static func providerInfoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.providerInfoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "providerInformations", bundle: ..., traitCollection: ...)`
    static func providerInformations(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.providerInformations, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio", bundle: ..., traitCollection: ...)`
    static func radio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio-button", bundle: ..., traitCollection: ...)`
    static func radioButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radioButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio-button-2", bundle: ..., traitCollection: ...)`
    static func radioButton2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radioButton2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "returnWallet", bundle: ..., traitCollection: ...)`
    static func returnWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.returnWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-bag", bundle: ..., traitCollection: ...)`
    static func shoppingBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingBag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snapchat", bundle: ..., traitCollection: ...)`
    static func snapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snapchat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "storeReport", bundle: ..., traitCollection: ...)`
    static func storeReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storeReport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "storeReport-1", bundle: ..., traitCollection: ...)`
    static func storeReport1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storeReport1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "storeReportIcon", bundle: ..., traitCollection: ...)`
    static func storeReportIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storeReportIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tray", bundle: ..., traitCollection: ...)`
    static func tray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tray-1", bundle: ..., traitCollection: ...)`
    static func tray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tray1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unRedDot", bundle: ..., traitCollection: ...)`
    static func unRedDot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unRedDot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload", bundle: ..., traitCollection: ...)`
    static func upload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome-1", bundle: ..., traitCollection: ...)`
    static func welcome1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome-2", bundle: ..., traitCollection: ...)`
    static func welcome2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome-3", bundle: ..., traitCollection: ...)`
    static func welcome3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome3, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 121 nibs.
  struct nib {
    /// Nib `AboutUsView`.
    static let aboutUsView = _R.nib._AboutUsView()
    /// Nib `AdditionsTableViewCell`.
    static let additionsTableViewCell = _R.nib._AdditionsTableViewCell()
    /// Nib `AddressTableCell`.
    static let addressTableCell = _R.nib._AddressTableCell()
    /// Nib `AddressesView`.
    static let addressesView = _R.nib._AddressesView()
    /// Nib `CardsListCell`.
    static let cardsListCell = _R.nib._CardsListCell()
    /// Nib `CardsListVC`.
    static let cardsListVC = _R.nib._CardsListVC()
    /// Nib `CartCell`.
    static let cartCell = _R.nib._CartCell()
    /// Nib `CartDetailsFooterCell`.
    static let cartDetailsFooterCell = _R.nib._CartDetailsFooterCell()
    /// Nib `CartView`.
    static let cartView = _R.nib._CartView()
    /// Nib `CategoryCollectionCell`.
    static let categoryCollectionCell = _R.nib._CategoryCollectionCell()
    /// Nib `CategoryDetailFilterCell`.
    static let categoryDetailFilterCell = _R.nib._CategoryDetailFilterCell()
    /// Nib `CategoryDetailsView`.
    static let categoryDetailsView = _R.nib._CategoryDetailsView()
    /// Nib `CategoryFilterView`.
    static let categoryFilterView = _R.nib._CategoryFilterView()
    /// Nib `CategoryTableCell`.
    static let categoryTableCell = _R.nib._CategoryTableCell()
    /// Nib `CheckoutVC`.
    static let checkoutVC = _R.nib._CheckoutVC()
    /// Nib `CompleteRegisterView`.
    static let completeRegisterView = _R.nib._CompleteRegisterView()
    /// Nib `ContactUsView`.
    static let contactUsView = _R.nib._ContactUsView()
    /// Nib `CouponsTableViewCell`.
    static let couponsTableViewCell = _R.nib._CouponsTableViewCell()
    /// Nib `CreateAddressView`.
    static let createAddressView = _R.nib._CreateAddressView()
    /// Nib `CreateCardVC`.
    static let createCardVC = _R.nib._CreateCardVC()
    /// Nib `DeliveryServiceView`.
    static let deliveryServiceView = _R.nib._DeliveryServiceView()
    /// Nib `DeliveryTypeView`.
    static let deliveryTypeView = _R.nib._DeliveryTypeView()
    /// Nib `EditAddVC`.
    static let editAddVC = _R.nib._EditAddVC()
    /// Nib `EditProfileView`.
    static let editProfileView = _R.nib._EditProfileView()
    /// Nib `EditSelectView`.
    static let editSelectView = _R.nib._EditSelectView()
    /// Nib `EditTextFieldView`.
    static let editTextFieldView = _R.nib._EditTextFieldView()
    /// Nib `EmptyScreen`.
    static let emptyScreen = _R.nib._EmptyScreen()
    /// Nib `ExtraMealCell`.
    static let extraMealCell = _R.nib._ExtraMealCell()
    /// Nib `FaqCell`.
    static let faqCell = _R.nib._FaqCell()
    /// Nib `FaqView`.
    static let faqView = _R.nib._FaqView()
    /// Nib `FavoritesView`.
    static let favoritesView = _R.nib._FavoritesView()
    /// Nib `FilterTableCell`.
    static let filterTableCell = _R.nib._FilterTableCell()
    /// Nib `FilterView`.
    static let filterView = _R.nib._FilterView()
    /// Nib `FinancialTransactionsCell`.
    static let financialTransactionsCell = _R.nib._FinancialTransactionsCell()
    /// Nib `ForgetPasswordView`.
    static let forgetPasswordView = _R.nib._ForgetPasswordView()
    /// Nib `HomeView`.
    static let homeView = _R.nib._HomeView()
    /// Nib `LangIntroView`.
    static let langIntroView = _R.nib._LangIntroView()
    /// Nib `LanguageView`.
    static let languageView = _R.nib._LanguageView()
    /// Nib `LoginView`.
    static let loginView = _R.nib._LoginView()
    /// Nib `LoyaltyPointsCell`.
    static let loyaltyPointsCell = _R.nib._LoyaltyPointsCell()
    /// Nib `LoyaltyPointsVC`.
    static let loyaltyPointsVC = _R.nib._LoyaltyPointsVC()
    /// Nib `MakeOrderDoneView`.
    static let makeOrderDoneView = _R.nib._MakeOrderDoneView()
    /// Nib `MealDetailsView`.
    static let mealDetailsView = _R.nib._MealDetailsView()
    /// Nib `MealExtraEditCell`.
    static let mealExtraEditCell = _R.nib._MealExtraEditCell()
    /// Nib `MealExtrasView`.
    static let mealExtrasView = _R.nib._MealExtrasView()
    /// Nib `MealFilterCell`.
    static let mealFilterCell = _R.nib._MealFilterCell()
    /// Nib `MealFilterView`.
    static let mealFilterView = _R.nib._MealFilterView()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `NotificationsView`.
    static let notificationsView = _R.nib._NotificationsView()
    /// Nib `OnBoardingCell`.
    static let onBoardingCell = _R.nib._OnBoardingCell()
    /// Nib `OnBoardingView`.
    static let onBoardingView = _R.nib._OnBoardingView()
    /// Nib `OrderCell`.
    static let orderCell = _R.nib._OrderCell()
    /// Nib `OrderDetailsView`.
    static let orderDetailsView = _R.nib._OrderDetailsView()
    /// Nib `OrderProductCell`.
    static let orderProductCell = _R.nib._OrderProductCell()
    /// Nib `OrdersView`.
    static let ordersView = _R.nib._OrdersView()
    /// Nib `PlusExtraMealCell`.
    static let plusExtraMealCell = _R.nib._PlusExtraMealCell()
    /// Nib `PopupConfirmationView`.
    static let popupConfirmationView = _R.nib._PopupConfirmationView()
    /// Nib `ProductCollectionCell`.
    static let productCollectionCell = _R.nib._ProductCollectionCell()
    /// Nib `ProductTableCell`.
    static let productTableCell = _R.nib._ProductTableCell()
    /// Nib `ProfileView`.
    static let profileView = _R.nib._ProfileView()
    /// Nib `ProviderAdsCell`.
    static let providerAdsCell = _R.nib._ProviderAdsCell()
    /// Nib `ProviderAdsVC`.
    static let providerAdsVC = _R.nib._ProviderAdsVC()
    /// Nib `ProviderCartListVC`.
    static let providerCartListVC = _R.nib._ProviderCartListVC()
    /// Nib `ProviderCategoriesCell`.
    static let providerCategoriesCell = _R.nib._ProviderCategoriesCell()
    /// Nib `ProviderCategoriesMealCell`.
    static let providerCategoriesMealCell = _R.nib._ProviderCategoriesMealCell()
    /// Nib `ProviderCompleteRegisterVC`.
    static let providerCompleteRegisterVC = _R.nib._ProviderCompleteRegisterVC()
    /// Nib `ProviderCouponVC`.
    static let providerCouponVC = _R.nib._ProviderCouponVC()
    /// Nib `ProviderDetailsView`.
    static let providerDetailsView = _R.nib._ProviderDetailsView()
    /// Nib `ProviderFilterOrdersTableViewCell`.
    static let providerFilterOrdersTableViewCell = _R.nib._ProviderFilterOrdersTableViewCell()
    /// Nib `ProviderFilterOrdersVC`.
    static let providerFilterOrdersVC = _R.nib._ProviderFilterOrdersVC()
    /// Nib `ProviderForgetPasswordVC`.
    static let providerForgetPasswordVC = _R.nib._ProviderForgetPasswordVC()
    /// Nib `ProviderHeaderTableviewFilterOrdersCell`.
    static let providerHeaderTableviewFilterOrdersCell = _R.nib._ProviderHeaderTableviewFilterOrdersCell()
    /// Nib `ProviderHomeVC`.
    static let providerHomeVC = _R.nib._ProviderHomeVC()
    /// Nib `ProviderLoginVC`.
    static let providerLoginVC = _R.nib._ProviderLoginVC()
    /// Nib `ProviderMealsView`.
    static let providerMealsView = _R.nib._ProviderMealsView()
    /// Nib `ProviderMoreMenuCell`.
    static let providerMoreMenuCell = _R.nib._ProviderMoreMenuCell()
    /// Nib `ProviderMoreMenuVC`.
    static let providerMoreMenuVC = _R.nib._ProviderMoreMenuVC()
    /// Nib `ProviderNotificationVC`.
    static let providerNotificationVC = _R.nib._ProviderNotificationVC()
    /// Nib `ProviderOrdersVC`.
    static let providerOrdersVC = _R.nib._ProviderOrdersVC()
    /// Nib `ProviderPackagesVC`.
    static let providerPackagesVC = _R.nib._ProviderPackagesVC()
    /// Nib `ProviderRatesView`.
    static let providerRatesView = _R.nib._ProviderRatesView()
    /// Nib `ProviderRegisterFirstStepCell`.
    static let providerRegisterFirstStepCell = _R.nib._ProviderRegisterFirstStepCell()
    /// Nib `ProviderRegisterSecondStepCellCell`.
    static let providerRegisterSecondStepCellCell = _R.nib._ProviderRegisterSecondStepCellCell()
    /// Nib `ProviderRegisterThirdStepCell`.
    static let providerRegisterThirdStepCell = _R.nib._ProviderRegisterThirdStepCell()
    /// Nib `ProviderRegisterVC`.
    static let providerRegisterVC = _R.nib._ProviderRegisterVC()
    /// Nib `ProviderResetPasswordVC`.
    static let providerResetPasswordVC = _R.nib._ProviderResetPasswordVC()
    /// Nib `ProviderSenderPackagesCell`.
    static let providerSenderPackagesCell = _R.nib._ProviderSenderPackagesCell()
    /// Nib `ProviderStoreReportsVC`.
    static let providerStoreReportsVC = _R.nib._ProviderStoreReportsVC()
    /// Nib `ProviderTabBarController`.
    static let providerTabBarController = _R.nib._ProviderTabBarController()
    /// Nib `ProviderVerifyCodeVC`.
    static let providerVerifyCodeVC = _R.nib._ProviderVerifyCodeVC()
    /// Nib `QuantityView`.
    static let quantityView = _R.nib._QuantityView()
    /// Nib `RadioView`.
    static let radioView = _R.nib._RadioView()
    /// Nib `Radio`.
    static let radio = _R.nib._Radio()
    /// Nib `RateTableCell`.
    static let rateTableCell = _R.nib._RateTableCell()
    /// Nib `ReOrderView`.
    static let reOrderView = _R.nib._ReOrderView()
    /// Nib `RegisterView`.
    static let registerView = _R.nib._RegisterView()
    /// Nib `ReservationCell`.
    static let reservationCell = _R.nib._ReservationCell()
    /// Nib `ReservationTableDoneView`.
    static let reservationTableDoneView = _R.nib._ReservationTableDoneView()
    /// Nib `ReservationTableView`.
    static let reservationTableView = _R.nib._ReservationTableView()
    /// Nib `ReservationTypeView`.
    static let reservationTypeView = _R.nib._ReservationTypeView()
    /// Nib `ResetPasswordView`.
    static let resetPasswordView = _R.nib._ResetPasswordView()
    /// Nib `ResturantSearchCell`.
    static let resturantSearchCell = _R.nib._ResturantSearchCell()
    /// Nib `ResturantTableCell`.
    static let resturantTableCell = _R.nib._ResturantTableCell()
    /// Nib `SearchCategoriesRestaurantCell`.
    static let searchCategoriesRestaurantCell = _R.nib._SearchCategoriesRestaurantCell()
    /// Nib `SearchCategoriesVC`.
    static let searchCategoriesVC = _R.nib._SearchCategoriesVC()
    /// Nib `SearchTableCell`.
    static let searchTableCell = _R.nib._SearchTableCell()
    /// Nib `SearchView`.
    static let searchView = _R.nib._SearchView()
    /// Nib `SelectUserTypeVC`.
    static let selectUserTypeVC = _R.nib._SelectUserTypeVC()
    /// Nib `SetNewPasswordVC`.
    static let setNewPasswordVC = _R.nib._SetNewPasswordVC()
    /// Nib `ShippingAddressCell`.
    static let shippingAddressCell = _R.nib._ShippingAddressCell()
    /// Nib `ShippingAddressFooterCell`.
    static let shippingAddressFooterCell = _R.nib._ShippingAddressFooterCell()
    /// Nib `ShippingAddressVC`.
    static let shippingAddressVC = _R.nib._ShippingAddressVC()
    /// Nib `SliderCollectionCell`.
    static let sliderCollectionCell = _R.nib._SliderCollectionCell()
    /// Nib `SplashVC`.
    static let splashVC = _R.nib._SplashVC()
    /// Nib `TagCollectionCell`.
    static let tagCollectionCell = _R.nib._TagCollectionCell()
    /// Nib `TagCollectionView`.
    static let tagCollectionView = _R.nib._TagCollectionView()
    /// Nib `TagSearchCell`.
    static let tagSearchCell = _R.nib._TagSearchCell()
    /// Nib `VerifyCodeView`.
    static let verifyCodeView = _R.nib._VerifyCodeView()
    /// Nib `WalletVC`.
    static let walletVC = _R.nib._WalletVC()
    /// Nib `WebViewView`.
    static let webViewView = _R.nib._WebViewView()
    /// Nib `WithdrawWalletBalanceVC`.
    static let withdrawWalletBalanceVC = _R.nib._WithdrawWalletBalanceVC()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AboutUsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutUsView) instead")
    static func aboutUsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutUsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AdditionsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.additionsTableViewCell) instead")
    static func additionsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.additionsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressTableCell) instead")
    static func addressTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressesView) instead")
    static func addressesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressesView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CardsListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cardsListCell) instead")
    static func cardsListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardsListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CardsListVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cardsListVC) instead")
    static func cardsListVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardsListVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartCell) instead")
    static func cartCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartDetailsFooterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartDetailsFooterCell) instead")
    static func cartDetailsFooterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartDetailsFooterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartView) instead")
    static func cartView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryCollectionCell) instead")
    static func categoryCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryDetailFilterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryDetailFilterCell) instead")
    static func categoryDetailFilterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryDetailFilterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryDetailsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryDetailsView) instead")
    static func categoryDetailsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryDetailsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryFilterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryFilterView) instead")
    static func categoryFilterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryFilterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryTableCell) instead")
    static func categoryTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CheckoutVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.checkoutVC) instead")
    static func checkoutVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.checkoutVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CompleteRegisterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.completeRegisterView) instead")
    static func completeRegisterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.completeRegisterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ContactUsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactUsView) instead")
    static func contactUsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactUsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CouponsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.couponsTableViewCell) instead")
    static func couponsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CreateAddressView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createAddressView) instead")
    static func createAddressView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createAddressView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CreateCardVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createCardVC) instead")
    static func createCardVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createCardVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeliveryServiceView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deliveryServiceView) instead")
    static func deliveryServiceView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deliveryServiceView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeliveryTypeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deliveryTypeView) instead")
    static func deliveryTypeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deliveryTypeView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditAddVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editAddVC) instead")
    static func editAddVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editAddVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditProfileView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileView) instead")
    static func editProfileView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditSelectView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editSelectView) instead")
    static func editSelectView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editSelectView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EditTextFieldView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editTextFieldView) instead")
    static func editTextFieldView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editTextFieldView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyScreen", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyScreen) instead")
    static func emptyScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExtraMealCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.extraMealCell) instead")
    static func extraMealCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.extraMealCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FaqCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faqCell) instead")
    static func faqCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faqCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FaqView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faqView) instead")
    static func faqView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faqView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FavoritesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoritesView) instead")
    static func favoritesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoritesView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterTableCell) instead")
    static func filterTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterView) instead")
    static func filterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FinancialTransactionsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.financialTransactionsCell) instead")
    static func financialTransactionsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.financialTransactionsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ForgetPasswordView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.forgetPasswordView) instead")
    static func forgetPasswordView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forgetPasswordView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeView) instead")
    static func homeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LangIntroView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.langIntroView) instead")
    static func langIntroView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.langIntroView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LanguageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.languageView) instead")
    static func languageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.languageView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginView) instead")
    static func loginView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoyaltyPointsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loyaltyPointsCell) instead")
    static func loyaltyPointsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loyaltyPointsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoyaltyPointsVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loyaltyPointsVC) instead")
    static func loyaltyPointsVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loyaltyPointsVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MakeOrderDoneView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.makeOrderDoneView) instead")
    static func makeOrderDoneView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.makeOrderDoneView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MealDetailsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mealDetailsView) instead")
    static func mealDetailsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mealDetailsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MealExtraEditCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mealExtraEditCell) instead")
    static func mealExtraEditCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mealExtraEditCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MealExtrasView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mealExtrasView) instead")
    static func mealExtrasView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mealExtrasView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MealFilterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mealFilterCell) instead")
    static func mealFilterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mealFilterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MealFilterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mealFilterView) instead")
    static func mealFilterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mealFilterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationsView) instead")
    static func notificationsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnBoardingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onBoardingCell) instead")
    static func onBoardingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onBoardingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnBoardingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onBoardingView) instead")
    static func onBoardingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onBoardingView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderCell) instead")
    static func orderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderDetailsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailsView) instead")
    static func orderDetailsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderProductCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderProductCell) instead")
    static func orderProductCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderProductCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrdersView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ordersView) instead")
    static func ordersView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ordersView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlusExtraMealCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plusExtraMealCell) instead")
    static func plusExtraMealCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plusExtraMealCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopupConfirmationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popupConfirmationView) instead")
    static func popupConfirmationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popupConfirmationView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCollectionCell) instead")
    static func productCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productTableCell) instead")
    static func productTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileView) instead")
    static func profileView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderAdsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerAdsCell) instead")
    static func providerAdsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerAdsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderAdsVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerAdsVC) instead")
    static func providerAdsVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerAdsVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderCartListVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerCartListVC) instead")
    static func providerCartListVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerCartListVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderCategoriesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerCategoriesCell) instead")
    static func providerCategoriesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerCategoriesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderCategoriesMealCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerCategoriesMealCell) instead")
    static func providerCategoriesMealCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerCategoriesMealCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderCompleteRegisterVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerCompleteRegisterVC) instead")
    static func providerCompleteRegisterVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerCompleteRegisterVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderCouponVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerCouponVC) instead")
    static func providerCouponVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerCouponVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderDetailsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerDetailsView) instead")
    static func providerDetailsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerDetailsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderFilterOrdersTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerFilterOrdersTableViewCell) instead")
    static func providerFilterOrdersTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerFilterOrdersTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderFilterOrdersVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerFilterOrdersVC) instead")
    static func providerFilterOrdersVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerFilterOrdersVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderForgetPasswordVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerForgetPasswordVC) instead")
    static func providerForgetPasswordVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerForgetPasswordVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderHeaderTableviewFilterOrdersCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerHeaderTableviewFilterOrdersCell) instead")
    static func providerHeaderTableviewFilterOrdersCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerHeaderTableviewFilterOrdersCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderHomeVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerHomeVC) instead")
    static func providerHomeVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerHomeVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderLoginVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerLoginVC) instead")
    static func providerLoginVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerLoginVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderMealsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerMealsView) instead")
    static func providerMealsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerMealsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderMoreMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerMoreMenuCell) instead")
    static func providerMoreMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerMoreMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderMoreMenuVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerMoreMenuVC) instead")
    static func providerMoreMenuVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerMoreMenuVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderNotificationVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerNotificationVC) instead")
    static func providerNotificationVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerNotificationVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderOrdersVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerOrdersVC) instead")
    static func providerOrdersVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerOrdersVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderPackagesVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerPackagesVC) instead")
    static func providerPackagesVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerPackagesVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderRatesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerRatesView) instead")
    static func providerRatesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerRatesView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderRegisterFirstStepCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerRegisterFirstStepCell) instead")
    static func providerRegisterFirstStepCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerRegisterFirstStepCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderRegisterSecondStepCellCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerRegisterSecondStepCellCell) instead")
    static func providerRegisterSecondStepCellCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerRegisterSecondStepCellCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderRegisterThirdStepCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerRegisterThirdStepCell) instead")
    static func providerRegisterThirdStepCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerRegisterThirdStepCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderRegisterVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerRegisterVC) instead")
    static func providerRegisterVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerRegisterVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderResetPasswordVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerResetPasswordVC) instead")
    static func providerResetPasswordVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerResetPasswordVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderSenderPackagesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerSenderPackagesCell) instead")
    static func providerSenderPackagesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerSenderPackagesCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderStoreReportsVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerStoreReportsVC) instead")
    static func providerStoreReportsVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerStoreReportsVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderTabBarController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerTabBarController) instead")
    static func providerTabBarController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerTabBarController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderVerifyCodeVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerVerifyCodeVC) instead")
    static func providerVerifyCodeVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerVerifyCodeVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuantityView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.quantityView) instead")
    static func quantityView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.quantityView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Radio", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.radio) instead")
    static func radio(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radio)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RadioView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.radioView) instead")
    static func radioView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RateTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rateTableCell) instead")
    static func rateTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rateTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReOrderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reOrderView) instead")
    static func reOrderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reOrderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerView) instead")
    static func registerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReservationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reservationCell) instead")
    static func reservationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reservationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReservationTableDoneView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reservationTableDoneView) instead")
    static func reservationTableDoneView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reservationTableDoneView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReservationTableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reservationTableView) instead")
    static func reservationTableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reservationTableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReservationTypeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reservationTypeView) instead")
    static func reservationTypeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reservationTypeView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResetPasswordView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resetPasswordView) instead")
    static func resetPasswordView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resetPasswordView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResturantSearchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resturantSearchCell) instead")
    static func resturantSearchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resturantSearchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResturantTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resturantTableCell) instead")
    static func resturantTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resturantTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchCategoriesRestaurantCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchCategoriesRestaurantCell) instead")
    static func searchCategoriesRestaurantCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchCategoriesRestaurantCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchCategoriesVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchCategoriesVC) instead")
    static func searchCategoriesVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchCategoriesVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchTableCell) instead")
    static func searchTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchView) instead")
    static func searchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectUserTypeVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectUserTypeVC) instead")
    static func selectUserTypeVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectUserTypeVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SetNewPasswordVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.setNewPasswordVC) instead")
    static func setNewPasswordVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setNewPasswordVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShippingAddressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shippingAddressCell) instead")
    static func shippingAddressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shippingAddressCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShippingAddressFooterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shippingAddressFooterCell) instead")
    static func shippingAddressFooterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shippingAddressFooterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShippingAddressVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shippingAddressVC) instead")
    static func shippingAddressVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shippingAddressVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SliderCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sliderCollectionCell) instead")
    static func sliderCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sliderCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashVC) instead")
    static func splashVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TagCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tagCollectionCell) instead")
    static func tagCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TagCollectionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tagCollectionView) instead")
    static func tagCollectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagCollectionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TagSearchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tagSearchCell) instead")
    static func tagSearchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagSearchCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VerifyCodeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.verifyCodeView) instead")
    static func verifyCodeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verifyCodeView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletVC) instead")
    static func walletVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WebViewView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.webViewView) instead")
    static func webViewView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.webViewView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WithdrawWalletBalanceVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawWalletBalanceVC) instead")
    static func withdrawWalletBalanceVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawWalletBalanceVC)
    }
    #endif

    static func aboutUsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.aboutUsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func additionsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdditionsTableViewCell? {
      return R.nib.additionsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdditionsTableViewCell
    }

    static func addressTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressTableCell? {
      return R.nib.addressTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressTableCell
    }

    static func addressesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addressesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func cardsListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardsListCell? {
      return R.nib.cardsListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardsListCell
    }

    static func cardsListVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cardsListVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func cartCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartCell? {
      return R.nib.cartCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartCell
    }

    static func cartDetailsFooterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartDetailsFooterCell? {
      return R.nib.cartDetailsFooterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartDetailsFooterCell
    }

    static func cartView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.cartView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func categoryCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCollectionCell? {
      return R.nib.categoryCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCollectionCell
    }

    static func categoryDetailFilterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDetailFilterCell? {
      return R.nib.categoryDetailFilterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDetailFilterCell
    }

    static func categoryDetailsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categoryDetailsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func categoryFilterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categoryFilterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func categoryTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryTableCell? {
      return R.nib.categoryTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryTableCell
    }

    static func checkoutVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.checkoutVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func completeRegisterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.completeRegisterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func contactUsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.contactUsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func couponsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponsTableViewCell? {
      return R.nib.couponsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponsTableViewCell
    }

    static func createAddressView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createAddressView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func createCardVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.createCardVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func deliveryServiceView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.deliveryServiceView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func deliveryTypeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.deliveryTypeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func editAddVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.editAddVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func editProfileView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.editProfileView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func editSelectView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.editSelectView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func editTextFieldView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.editTextFieldView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func emptyScreen(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyScreen.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func extraMealCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExtraMealCell? {
      return R.nib.extraMealCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExtraMealCell
    }

    static func faqCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqCell? {
      return R.nib.faqCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqCell
    }

    static func faqView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.faqView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func favoritesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.favoritesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func filterTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterTableCell? {
      return R.nib.filterTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterTableCell
    }

    static func filterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.filterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func financialTransactionsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FinancialTransactionsCell? {
      return R.nib.financialTransactionsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FinancialTransactionsCell
    }

    static func forgetPasswordView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.forgetPasswordView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func langIntroView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.langIntroView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func languageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.languageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loyaltyPointsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoyaltyPointsCell? {
      return R.nib.loyaltyPointsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoyaltyPointsCell
    }

    static func loyaltyPointsVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loyaltyPointsVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func makeOrderDoneView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.makeOrderDoneView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mealDetailsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mealDetailsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mealExtraEditCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealExtraEditCell? {
      return R.nib.mealExtraEditCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealExtraEditCell
    }

    static func mealExtrasView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mealExtrasView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mealFilterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealFilterCell? {
      return R.nib.mealFilterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealFilterCell
    }

    static func mealFilterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mealFilterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func notificationsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.notificationsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onBoardingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnBoardingCell? {
      return R.nib.onBoardingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnBoardingCell
    }

    static func onBoardingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onBoardingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func orderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderCell? {
      return R.nib.orderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
    }

    static func orderDetailsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderDetailsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func orderProductCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderProductCell? {
      return R.nib.orderProductCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderProductCell
    }

    static func ordersView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.ordersView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func plusExtraMealCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlusExtraMealCell? {
      return R.nib.plusExtraMealCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlusExtraMealCell
    }

    static func popupConfirmationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.popupConfirmationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func productCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCollectionCell? {
      return R.nib.productCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCollectionCell
    }

    static func productTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductTableCell? {
      return R.nib.productTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductTableCell
    }

    static func profileView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerAdsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderAdsCell? {
      return R.nib.providerAdsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderAdsCell
    }

    static func providerAdsVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerAdsVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerCartListVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerCartListVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerCategoriesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderCategoriesCell? {
      return R.nib.providerCategoriesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderCategoriesCell
    }

    static func providerCategoriesMealCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderCategoriesMealCell? {
      return R.nib.providerCategoriesMealCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderCategoriesMealCell
    }

    static func providerCompleteRegisterVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerCompleteRegisterVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerCouponVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerCouponVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerDetailsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerDetailsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerFilterOrdersTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderFilterOrdersTableViewCell? {
      return R.nib.providerFilterOrdersTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderFilterOrdersTableViewCell
    }

    static func providerFilterOrdersVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerFilterOrdersVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerForgetPasswordVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerForgetPasswordVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerHeaderTableviewFilterOrdersCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderHeaderTableviewFilterOrdersCell? {
      return R.nib.providerHeaderTableviewFilterOrdersCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderHeaderTableviewFilterOrdersCell
    }

    static func providerHomeVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerHomeVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerLoginVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerLoginVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerMealsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerMealsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerMoreMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderMoreMenuCell? {
      return R.nib.providerMoreMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderMoreMenuCell
    }

    static func providerMoreMenuVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerMoreMenuVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerNotificationVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerNotificationVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerOrdersVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerOrdersVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerPackagesVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerPackagesVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerRatesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerRatesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerRegisterFirstStepCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderRegisterFirstStepCell? {
      return R.nib.providerRegisterFirstStepCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderRegisterFirstStepCell
    }

    static func providerRegisterSecondStepCellCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderRegisterSecondStepCellCell? {
      return R.nib.providerRegisterSecondStepCellCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderRegisterSecondStepCellCell
    }

    static func providerRegisterThirdStepCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderRegisterThirdStepCell? {
      return R.nib.providerRegisterThirdStepCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderRegisterThirdStepCell
    }

    static func providerRegisterVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerRegisterVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerResetPasswordVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerResetPasswordVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerSenderPackagesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderSenderPackagesCell? {
      return R.nib.providerSenderPackagesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderSenderPackagesCell
    }

    static func providerStoreReportsVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerStoreReportsVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerTabBarController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerTabBarController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func providerVerifyCodeVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.providerVerifyCodeVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func quantityView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.quantityView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func radio(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.radio.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func radioView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.radioView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func rateTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RateTableCell? {
      return R.nib.rateTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RateTableCell
    }

    static func reOrderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.reOrderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func registerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.registerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func reservationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReservationCell? {
      return R.nib.reservationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReservationCell
    }

    static func reservationTableDoneView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.reservationTableDoneView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func reservationTableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.reservationTableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func reservationTypeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.reservationTypeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func resetPasswordView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.resetPasswordView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func resturantSearchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResturantSearchCell? {
      return R.nib.resturantSearchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResturantSearchCell
    }

    static func resturantTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResturantTableCell? {
      return R.nib.resturantTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResturantTableCell
    }

    static func searchCategoriesRestaurantCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchCategoriesRestaurantCell? {
      return R.nib.searchCategoriesRestaurantCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchCategoriesRestaurantCell
    }

    static func searchCategoriesVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchCategoriesVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchTableCell? {
      return R.nib.searchTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchTableCell
    }

    static func searchView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func selectUserTypeVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.selectUserTypeVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func setNewPasswordVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.setNewPasswordVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func shippingAddressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShippingAddressCell? {
      return R.nib.shippingAddressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShippingAddressCell
    }

    static func shippingAddressFooterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShippingAddressFooterCell? {
      return R.nib.shippingAddressFooterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShippingAddressFooterCell
    }

    static func shippingAddressVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.shippingAddressVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func sliderCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SliderCollectionCell? {
      return R.nib.sliderCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SliderCollectionCell
    }

    static func splashVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func tagCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagCollectionCell? {
      return R.nib.tagCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCollectionCell
    }

    static func tagCollectionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tagCollectionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func tagSearchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagSearchCell? {
      return R.nib.tagSearchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagSearchCell
    }

    static func verifyCodeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.verifyCodeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func walletVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.walletVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func webViewView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.webViewView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func withdrawWalletBalanceVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.withdrawWalletBalanceVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MenuCell`.
    static let menuCell: Rswift.ReuseIdentifier<MenuCell> = Rswift.ReuseIdentifier(identifier: "MenuCell")
    /// Reuse identifier `ProviderFilterOrdersTableViewCell`.
    static let providerFilterOrdersTableViewCell: Rswift.ReuseIdentifier<ProviderFilterOrdersTableViewCell> = Rswift.ReuseIdentifier(identifier: "ProviderFilterOrdersTableViewCell")
    /// Reuse identifier `ShippingAddressCell`.
    static let shippingAddressCell: Rswift.ReuseIdentifier<ShippingAddressCell> = Rswift.ReuseIdentifier(identifier: "ShippingAddressCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: Camera
      ///
      /// Locales: en, ar
      static let cameraLan = Rswift.StringResource(key: "camera.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ar
      static let cancelLan = Rswift.StringResource(key: "cancel.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en, ar
      static let photoLibraryLan = Rswift.StringResource(key: "photo.library.lan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Hello
      ///
      /// Locales: en, ar
      static let hello = Rswift.StringResource(key: "Hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: SAR
      ///
      /// Locales: en, ar
      static let sarFull = Rswift.StringResource(key: "SAR.full", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: SAR
      ///
      /// Locales: en, ar
      static let sarShort = Rswift.StringResource(key: "SAR.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)

      /// en translation: Camera
      ///
      /// Locales: en, ar
      static func cameraLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera.lan"
        }

        return NSLocalizedString("camera.lan", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ar
      static func cancelLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel.lan"
        }

        return NSLocalizedString("cancel.lan", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en, ar
      static func photoLibraryLan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photo.library.lan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photo.library.lan"
        }

        return NSLocalizedString("photo.library.lan", bundle: bundle, comment: "")
      }

      /// en translation: Hello
      ///
      /// Locales: en, ar
      static func hello(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hello", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hello"
        }

        return NSLocalizedString("Hello", bundle: bundle, comment: "")
      }

      /// en translation: SAR
      ///
      /// Locales: en, ar
      static func sarFull(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SAR.full", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SAR.full"
        }

        return NSLocalizedString("SAR.full", bundle: bundle, comment: "")
      }

      /// en translation: SAR
      ///
      /// Locales: en, ar
      static func sarShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SAR.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SAR.short"
        }

        return NSLocalizedString("SAR.short", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AdditionsTableViewCell.validate()
      try _CardsListCell.validate()
      try _CardsListVC.validate()
      try _CartCell.validate()
      try _CategoryTableCell.validate()
      try _CheckoutVC.validate()
      try _CouponsTableViewCell.validate()
      try _CreateCardVC.validate()
      try _EditAddVC.validate()
      try _EmptyScreen.validate()
      try _ExtraMealCell.validate()
      try _FilterView.validate()
      try _FinancialTransactionsCell.validate()
      try _LoyaltyPointsCell.validate()
      try _LoyaltyPointsVC.validate()
      try _MealExtraEditCell.validate()
      try _MealFilterCell.validate()
      try _NotificationCell.validate()
      try _OnBoardingCell.validate()
      try _OrderCell.validate()
      try _OrderProductCell.validate()
      try _PlusExtraMealCell.validate()
      try _ProductCollectionCell.validate()
      try _ProductTableCell.validate()
      try _ProviderAdsCell.validate()
      try _ProviderAdsVC.validate()
      try _ProviderCartListVC.validate()
      try _ProviderCategoriesMealCell.validate()
      try _ProviderCompleteRegisterVC.validate()
      try _ProviderCouponVC.validate()
      try _ProviderFilterOrdersVC.validate()
      try _ProviderForgetPasswordVC.validate()
      try _ProviderHomeVC.validate()
      try _ProviderLoginVC.validate()
      try _ProviderMoreMenuCell.validate()
      try _ProviderMoreMenuVC.validate()
      try _ProviderPackagesVC.validate()
      try _ProviderRegisterFirstStepCell.validate()
      try _ProviderRegisterThirdStepCell.validate()
      try _ProviderRegisterVC.validate()
      try _ProviderResetPasswordVC.validate()
      try _ProviderSenderPackagesCell.validate()
      try _ProviderVerifyCodeVC.validate()
      try _QuantityView.validate()
      try _RadioView.validate()
      try _RateTableCell.validate()
      try _ResturantTableCell.validate()
      try _SearchCategoriesRestaurantCell.validate()
      try _SearchCategoriesVC.validate()
      try _SearchTableCell.validate()
      try _SelectUserTypeVC.validate()
      try _SetNewPasswordVC.validate()
      try _ShippingAddressCell.validate()
      try _ShippingAddressFooterCell.validate()
      try _ShippingAddressVC.validate()
      try _TagCollectionView.validate()
      try _WalletVC.validate()
      try _WithdrawWalletBalanceVC.validate()
    }

    struct _AboutUsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AboutUsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AdditionsTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AdditionsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdditionsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdditionsTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542-1' is used in nib 'AdditionsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddressTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddressTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressTableCell
      }

      fileprivate init() {}
    }

    struct _AddressesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddressesView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CardsListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CardsListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardsListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardsListCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "mastercard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mastercard' is used in nib 'CardsListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'CardsListCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CardsListVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CardsListVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'CardsListVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'CardsListVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "createBT", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'createBT' is used in nib 'CardsListVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'CardsListVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CartCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CartCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542-1' is used in nib 'CartCell', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "minus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'minus' is used in nib 'CartCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'CartCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'CartCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadowColorRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadowColorRed' is used in nib 'CartCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CartDetailsFooterCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CartDetailsFooterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartDetailsFooterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartDetailsFooterCell
      }

      fileprivate init() {}
    }

    struct _CartView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CartView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CategoryCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCollectionCell
      }

      fileprivate init() {}
    }

    struct _CategoryDetailFilterCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryDetailFilterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDetailFilterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDetailFilterCell
      }

      fileprivate init() {}
    }

    struct _CategoryDetailsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryDetailsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CategoryFilterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryFilterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CategoryTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CategoryTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "299b538d1d69ae20db0a83028ee65bda", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '299b538d1d69ae20db0a83028ee65bda' is used in nib 'CategoryTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CheckoutVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CheckoutVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon awesome-coins", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon awesome-coins' is used in nib 'CheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon awesome-money-bill-alt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon awesome-money-bill-alt' is used in nib 'CheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon ionic-md-card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon ionic-md-card' is used in nib 'CheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'CheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'CheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio' is used in nib 'CheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio-button-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio-button-2' is used in nib 'CheckoutVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "shadowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadowColor' is used in nib 'CheckoutVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'CheckoutVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CompleteRegisterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CompleteRegisterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ContactUsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ContactUsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CouponsTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CouponsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponsTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon material-local-offer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-local-offer' is used in nib 'CouponsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Calendar' is used in nib 'CouponsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Chart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Chart' is used in nib 'CouponsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Graph", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Graph' is used in nib 'CouponsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "OrangGradient2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'OrangGradient2' is used in nib 'CouponsTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CreateAddressView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CreateAddressView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CreateCardVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CreateCardVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'CreateCardVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'CreateCardVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar' is used in nib 'CreateCardVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DeliveryServiceView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DeliveryServiceView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DeliveryTypeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DeliveryTypeView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EditAddVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditAddVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Iconly-Light-Calendar-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Calendar-1' is used in nib 'EditAddVC', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'circle' is used in nib 'EditAddVC', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EditProfileView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfileView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EditSelectView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditSelectView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EditTextFieldView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditTextFieldView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _EmptyScreen: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyScreen"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "box", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'box' is used in nib 'EmptyScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ExtraMealCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ExtraMealCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExtraMealCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExtraMealCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Burger", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Burger' is used in nib 'ExtraMealCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon material-cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-cancel' is used in nib 'ExtraMealCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fire' is used in nib 'ExtraMealCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tray-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tray-1' is used in nib 'ExtraMealCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in nib 'ExtraMealCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FaqCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FaqCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqCell
      }

      fileprivate init() {}
    }

    struct _FaqView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FaqView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FavoritesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FavoritesView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FilterTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FilterTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterTableCell
      }

      fileprivate init() {}
    }

    struct _FilterView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FilterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2587", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2587' is used in nib 'FilterView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'FilterView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FinancialTransactionsCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FinancialTransactionsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FinancialTransactionsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FinancialTransactionsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "returnWallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'returnWallet' is used in nib 'FinancialTransactionsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'FinancialTransactionsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ForgetPasswordView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ForgetPasswordView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LangIntroView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LangIntroView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LanguageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LanguageView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoginView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoginView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoyaltyPointsCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoyaltyPointsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoyaltyPointsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoyaltyPointsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "384427745a5c82ffe8adc3bcea0be560", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '384427745a5c82ffe8adc3bcea0be560' is used in nib 'LoyaltyPointsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PointScore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PointScore' is used in nib 'LoyaltyPointsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'LoyaltyPointsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _LoyaltyPointsVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoyaltyPointsVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'LoyaltyPointsVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'LoyaltyPointsVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MakeOrderDoneView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MakeOrderDoneView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MealDetailsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MealDetailsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MealExtraEditCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MealExtraEditCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealExtraEditCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealExtraEditCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "384427745a5c82ffe8adc3bcea0be560", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '384427745a5c82ffe8adc3bcea0be560' is used in nib 'MealExtraEditCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fire' is used in nib 'MealExtraEditCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tray-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tray-1' is used in nib 'MealExtraEditCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in nib 'MealExtraEditCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'MealExtraEditCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'MealExtraEditCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in nib 'MealExtraEditCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MealExtrasView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MealExtrasView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MealFilterCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MealFilterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealFilterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealFilterCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon material-cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-cancel' is used in nib 'MealFilterCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'MealFilterCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in nib 'MealFilterCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MealFilterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MealFilterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2613", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2613' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unRedDot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unRedDot' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'NotificationCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NotificationsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OnBoardingCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnBoardingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnBoardingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnBoardingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Layer 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Layer 2-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2-1' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Layer 2-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2-2' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "welcome-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome-1' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "WhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'WhiteColor' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadowColorRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadowColorRed' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadowColorYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadowColorYellow' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdColor' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'OnBoardingCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OnBoardingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OnBoardingView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OrderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "384427745a5c82ffe8adc3bcea0be560", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '384427745a5c82ffe8adc3bcea0be560' is used in nib 'OrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in nib 'OrderCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'OrderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OrderDetailsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderDetailsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OrderProductCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderProductCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderProductCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderProductCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "a8cf0f598d527900aec8cec5d4ec8171", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'a8cf0f598d527900aec8cec5d4ec8171' is used in nib 'OrderProductCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in nib 'OrderProductCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OrdersView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrdersView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PlusExtraMealCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlusExtraMealCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlusExtraMealCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlusExtraMealCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'PlusExtraMealCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'PlusExtraMealCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'PlusExtraMealCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PopupConfirmationView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PopupConfirmationView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProductCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2543", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2543' is used in nib 'ProductCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2611", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2611' is used in nib 'ProductCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-3' is used in nib 'ProductCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in nib 'ProductCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Iconly-Light-Heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Heart' is used in nib 'ProductTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in nib 'ProductTableCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'ProductTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProfileView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProviderAdsCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderAdsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderAdsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderAdsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "AdsImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AdsImage' is used in nib 'ProviderAdsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProviderAdsVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderAdsVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'ProviderAdsVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderAdsVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderCartListVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderCartListVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'ProviderCartListVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'ProviderCartListVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderCartListVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderCategoriesCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderCategoriesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderCategoriesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderCategoriesCell
      }

      fileprivate init() {}
    }

    struct _ProviderCategoriesMealCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderCategoriesMealCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderCategoriesMealCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderCategoriesMealCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "384427745a5c82ffe8adc3bcea0be560", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '384427745a5c82ffe8adc3bcea0be560' is used in nib 'ProviderCategoriesMealCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PointScore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PointScore' is used in nib 'ProviderCategoriesMealCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fire' is used in nib 'ProviderCategoriesMealCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderCategoriesMealCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in nib 'ProviderCategoriesMealCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderCompleteRegisterVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderCompleteRegisterVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'ProviderCompleteRegisterVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'ProviderCompleteRegisterVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderCouponVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderCouponVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542-1' is used in nib 'ProviderCouponVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Search-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Search-2' is used in nib 'ProviderCouponVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Layer 2-11", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2-11' is used in nib 'ProviderCouponVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'ProviderCouponVC', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'ProviderCouponVC', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "OrangGradient1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'OrangGradient1' is used in nib 'ProviderCouponVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderDetailsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderDetailsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProviderFilterOrdersTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProviderFilterOrdersTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ProviderFilterOrdersTableViewCell"
      let name = "ProviderFilterOrdersTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderFilterOrdersTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderFilterOrdersTableViewCell
      }

      fileprivate init() {}
    }

    struct _ProviderFilterOrdersVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderFilterOrdersVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Iconly-Light-Calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Calendar' is used in nib 'ProviderFilterOrdersVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProviderForgetPasswordVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderForgetPasswordVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'ProviderForgetPasswordVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'ProviderForgetPasswordVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor1' is used in nib 'ProviderForgetPasswordVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in nib 'ProviderForgetPasswordVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderForgetPasswordVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderForgetPasswordVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'ProviderForgetPasswordVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderHeaderTableviewFilterOrdersCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderHeaderTableviewFilterOrdersCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderHeaderTableviewFilterOrdersCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderHeaderTableviewFilterOrdersCell
      }

      fileprivate init() {}
    }

    struct _ProviderHomeVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderHomeVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Iconly-Light-Document", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Document' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ordersBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ordersBG' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "packageBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'packageBG' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "packageIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'packageIcon' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "providerInfoBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'providerInfoBG' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "providerInfoIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'providerInfoIcon' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "storeReport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'storeReport' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "storeReportIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'storeReportIcon' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in nib 'ProviderHomeVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderLoginVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderLoginVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'ProviderLoginVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logoName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoName' is used in nib 'ProviderLoginVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in nib 'ProviderLoginVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderLoginVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondTextColor' is used in nib 'ProviderLoginVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderLoginVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'ProviderLoginVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderMealsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderMealsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProviderMoreMenuCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderMoreMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderMoreMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderMoreMenuCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in nib 'ProviderMoreMenuCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "basic_salary_history", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'basic_salary_history' is used in nib 'ProviderMoreMenuCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProviderMoreMenuVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderMoreMenuVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'ProviderMoreMenuVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileImage' is used in nib 'ProviderMoreMenuVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProviderNotificationVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderNotificationVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProviderOrdersVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderOrdersVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProviderPackagesVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderPackagesVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Packages", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Packages' is used in nib 'ProviderPackagesVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'ProviderPackagesVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderPackagesVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderPackagesVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderRatesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderRatesView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProviderRegisterFirstStepCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderRegisterFirstStepCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderRegisterFirstStepCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderRegisterFirstStepCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-down' is used in nib 'ProviderRegisterFirstStepCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gallery' is used in nib 'ProviderRegisterFirstStepCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gps", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gps' is used in nib 'ProviderRegisterFirstStepCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio' is used in nib 'ProviderRegisterFirstStepCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'ProviderRegisterFirstStepCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderRegisterFirstStepCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderRegisterSecondStepCellCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderRegisterSecondStepCellCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderRegisterSecondStepCellCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderRegisterSecondStepCellCell
      }

      fileprivate init() {}
    }

    struct _ProviderRegisterThirdStepCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderRegisterThirdStepCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderRegisterThirdStepCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderRegisterThirdStepCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye' is used in nib 'ProviderRegisterThirdStepCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upload", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upload' is used in nib 'ProviderRegisterThirdStepCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderRegisterThirdStepCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderRegisterVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderRegisterVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Burger", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Burger' is used in nib 'ProviderRegisterVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LogoNameWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LogoNameWhite' is used in nib 'ProviderRegisterVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-white' is used in nib 'ProviderRegisterVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in nib 'ProviderRegisterVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderRegisterVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'ProviderRegisterVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'ProviderRegisterVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderResetPasswordVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderResetPasswordVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'ProviderResetPasswordVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'ProviderResetPasswordVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in nib 'ProviderResetPasswordVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderResetPasswordVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderResetPasswordVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderSenderPackagesCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderSenderPackagesCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderSenderPackagesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderSenderPackagesCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "checkBox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkBox' is used in nib 'ProviderSenderPackagesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'ProviderSenderPackagesCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderSenderPackagesCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderStoreReportsVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderStoreReportsVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProviderTabBarController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProviderTabBarController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProviderVerifyCodeVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProviderVerifyCodeVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'ProviderVerifyCodeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'ProviderVerifyCodeVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor1' is used in nib 'ProviderVerifyCodeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ProviderVerifyCodeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in nib 'ProviderVerifyCodeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'ProviderVerifyCodeVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _QuantityView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuantityView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "minus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'minus' is used in nib 'QuantityView', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in nib 'QuantityView', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'QuantityView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadowColorRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadowColorRed' is used in nib 'QuantityView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _Radio: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Radio"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RadioView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RadioView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "radioButtonChecked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radioButtonChecked' is used in nib 'RadioView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RateTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RateTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RateTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RateTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "299b538d1d69ae20db0a83028ee65bda", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '299b538d1d69ae20db0a83028ee65bda' is used in nib 'RateTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'RateTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "starEmptyColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'starEmptyColor' is used in nib 'RateTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ReOrderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReOrderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RegisterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RegisterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ReservationCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReservationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReservationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReservationCell
      }

      fileprivate init() {}
    }

    struct _ReservationTableDoneView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReservationTableDoneView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ReservationTableView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReservationTableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ReservationTypeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReservationTypeView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ResetPasswordView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResetPasswordView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ResturantSearchCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResturantSearchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResturantSearchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResturantSearchCell
      }

      fileprivate init() {}
    }

    struct _ResturantTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ResturantTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResturantTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResturantTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "384427745a5c82ffe8adc3bcea0be560", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '384427745a5c82ffe8adc3bcea0be560' is used in nib 'ResturantTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Location' is used in nib 'ResturantTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Offline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Offline' is used in nib 'ResturantTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favoriteOrange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favoriteOrange' is used in nib 'ResturantTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'ResturantTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "starEmptyColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'starEmptyColor' is used in nib 'ResturantTableCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SearchCategoriesRestaurantCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchCategoriesRestaurantCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchCategoriesRestaurantCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchCategoriesRestaurantCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "384427745a5c82ffe8adc3bcea0be560", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '384427745a5c82ffe8adc3bcea0be560' is used in nib 'SearchCategoriesRestaurantCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Location' is used in nib 'SearchCategoriesRestaurantCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PointScore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PointScore' is used in nib 'SearchCategoriesRestaurantCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'SearchCategoriesRestaurantCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "starEmptyColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'starEmptyColor' is used in nib 'SearchCategoriesRestaurantCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in nib 'SearchCategoriesRestaurantCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SearchCategoriesVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchCategoriesVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 58", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 58' is used in nib 'SearchCategoriesVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Search' is used in nib 'SearchCategoriesVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'SearchCategoriesVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-down' is used in nib 'SearchCategoriesVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'SearchCategoriesVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'SearchCategoriesVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SearchTableCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchTableCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon material-cancel-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-cancel-1' is used in nib 'SearchTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SearchView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SelectUserTypeVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectUserTypeVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'SelectUserTypeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logoName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoName' is used in nib 'SelectUserTypeVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'SelectUserTypeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in nib 'SelectUserTypeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in nib 'SelectUserTypeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondTextColor' is used in nib 'SelectUserTypeVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SetNewPasswordVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SetNewPasswordVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in nib 'SetNewPasswordVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'SetNewPasswordVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye' is used in nib 'SetNewPasswordVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in nib 'SetNewPasswordVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'SetNewPasswordVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ShippingAddressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ShippingAddressCell

      let bundle = R.hostingBundle
      let identifier = "ShippingAddressCell"
      let name = "ShippingAddressCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShippingAddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShippingAddressCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "radio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio' is used in nib 'ShippingAddressCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ShippingAddressFooterCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShippingAddressFooterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShippingAddressFooterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShippingAddressFooterCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in nib 'ShippingAddressFooterCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ShippingAddressVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShippingAddressVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'ShippingAddressVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'ShippingAddressVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'ShippingAddressVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SliderCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SliderCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SliderCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SliderCollectionCell
      }

      fileprivate init() {}
    }

    struct _SplashVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SplashVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TagCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TagCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCollectionCell
      }

      fileprivate init() {}
    }

    struct _TagCollectionView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TagCollectionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-down' is used in nib 'TagCollectionView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in nib 'TagCollectionView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TagSearchCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TagSearchCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagSearchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagSearchCell
      }

      fileprivate init() {}
    }

    struct _VerifyCodeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VerifyCodeView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WalletVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'WalletVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'WalletVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "money-bag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'money-bag' is used in nib 'WalletVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in nib 'WalletVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WebViewView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WebViewView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WithdrawWalletBalanceVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WithdrawWalletBalanceVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in nib 'WithdrawWalletBalanceVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-down' is used in nib 'WithdrawWalletBalanceVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in nib 'WithdrawWalletBalanceVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try aboutUsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try addressesStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try cartStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try categoryDetailsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try categoryFilterStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try completeRegisterStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try contactUsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try createAddressStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try deliveryServiceStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try deliveryTypeStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try editProfileStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try faqStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try favoritesStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try forgetPasswordStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try homeStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try imageDisplayController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try langIntroStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try languageStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try locationFromMapStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try loginStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try makeOrderDoneStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mealDetailsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mealExtrasStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mealFilterStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try menu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try notificationsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onBoardingStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try orderDetailsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try ordersStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try pickTimeController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try pickerViewHelper.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try providerDetailsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try providerMealsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try providerRatesStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try reOrderStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try registerStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try reservationDetailsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try reservationTableDoneStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try reservationTableStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try reservationTypeStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try reservationsFilterStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try reservationsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try resetPasswordStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try searchFilterStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try searchStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try verifyCodeStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try webViewStoryboard.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct aboutUsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AboutUsVC

      let aboutUsVC = StoryboardViewControllerResource<AboutUsVC>(identifier: "AboutUsVC")
      let bundle = R.hostingBundle
      let name = "AboutUsStoryboard"

      func aboutUsVC(_: Void = ()) -> AboutUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutUsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542' is used in storyboard 'AboutUsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2645", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2645' is used in storyboard 'AboutUsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2646", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2646' is used in storyboard 'AboutUsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2647", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2647' is used in storyboard 'AboutUsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'AboutUsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'AboutUsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.aboutUsStoryboard().aboutUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutUsVC' could not be loaded from storyboard 'AboutUsStoryboard' as 'AboutUsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct addressesStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addressesVC = StoryboardViewControllerResource<AddressesVC>(identifier: "AddressesVC")
      let bundle = R.hostingBundle
      let name = "AddressesStoryboard"

      func addressesVC(_: Void = ()) -> AddressesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressesVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in storyboard 'AddressesStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'AddressesStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "createBT", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'createBT' is used in storyboard 'AddressesStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'AddressesStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.addressesStoryboard().addressesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressesVC' could not be loaded from storyboard 'AddressesStoryboard' as 'AddressesVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct cartStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CartVC

      let bundle = R.hostingBundle
      let cartVC = StoryboardViewControllerResource<CartVC>(identifier: "CartVC")
      let name = "CartStoryboard"

      func cartVC(_: Void = ()) -> CartVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cartVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in storyboard 'CartStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'CartStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'CartStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.cartStoryboard().cartVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cartVC' could not be loaded from storyboard 'CartStoryboard' as 'CartVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct categoryDetailsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CategoryDetailsVC

      let bundle = R.hostingBundle
      let categoryDetailsVC = StoryboardViewControllerResource<CategoryDetailsVC>(identifier: "CategoryDetailsVC")
      let name = "CategoryDetailsStoryboard"

      func categoryDetailsVC(_: Void = ()) -> CategoryDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryDetailsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 58", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 58' is used in storyboard 'CategoryDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'CategoryDetailsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'CategoryDetailsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.categoryDetailsStoryboard().categoryDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryDetailsVC' could not be loaded from storyboard 'CategoryDetailsStoryboard' as 'CategoryDetailsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct categoryFilterStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CategoryFilterVC

      let bundle = R.hostingBundle
      let categoryFilterVC = StoryboardViewControllerResource<CategoryFilterVC>(identifier: "CategoryFilterVC")
      let name = "CategoryFilterStoryboard"

      func categoryFilterVC(_: Void = ()) -> CategoryFilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryFilterVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Layer 2-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2-3' is used in storyboard 'CategoryFilterStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tray' is used in storyboard 'CategoryFilterStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'CategoryFilterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'CategoryFilterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'CategoryFilterStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.categoryFilterStoryboard().categoryFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryFilterVC' could not be loaded from storyboard 'CategoryFilterStoryboard' as 'CategoryFilterVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct completeRegisterStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CompleteRegisterVC

      let bundle = R.hostingBundle
      let completeRegisterVC = StoryboardViewControllerResource<CompleteRegisterVC>(identifier: "CompleteRegisterVC")
      let name = "CompleteRegisterStoryboard"

      func completeRegisterVC(_: Void = ()) -> CompleteRegisterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: completeRegisterVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'CompleteRegisterStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'CompleteRegisterStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye' is used in storyboard 'CompleteRegisterStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'CompleteRegisterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'CompleteRegisterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'CompleteRegisterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'CompleteRegisterStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.completeRegisterStoryboard().completeRegisterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'completeRegisterVC' could not be loaded from storyboard 'CompleteRegisterStoryboard' as 'CompleteRegisterVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct contactUsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ContactUsVC

      let bundle = R.hostingBundle
      let contactUsVC = StoryboardViewControllerResource<ContactUsVC>(identifier: "ContactUsVC")
      let name = "ContactUsStoryboard"

      func contactUsVC(_: Void = ()) -> ContactUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "076d506b2c5e606e82bf26462bf5f8e7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '076d506b2c5e606e82bf26462bf5f8e7' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2542", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2645", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2645' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2646", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2646' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2647", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2647' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'ContactUsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.contactUsStoryboard().contactUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsVC' could not be loaded from storyboard 'ContactUsStoryboard' as 'ContactUsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct createAddressStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CreateAddressVC

      let bundle = R.hostingBundle
      let createAddressVC = StoryboardViewControllerResource<CreateAddressVC>(identifier: "CreateAddressVC")
      let name = "CreateAddressStoryboard"

      func createAddressVC(_: Void = ()) -> CreateAddressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createAddressVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'CreateAddressStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:BH4-4F-gCw:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'button:BH4-4F-gCw:image' is used in storyboard 'CreateAddressStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in storyboard 'CreateAddressStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in storyboard 'CreateAddressStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.createAddressStoryboard().createAddressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createAddressVC' could not be loaded from storyboard 'CreateAddressStoryboard' as 'CreateAddressVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct deliveryServiceStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DeliveryServiceVC

      let bundle = R.hostingBundle
      let deliveryServiceVC = StoryboardViewControllerResource<DeliveryServiceVC>(identifier: "DeliveryServiceVC")
      let name = "DeliveryServiceStoryboard"

      func deliveryServiceVC(_: Void = ()) -> DeliveryServiceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deliveryServiceVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "group55", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'group55' is used in storyboard 'DeliveryServiceStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.deliveryServiceStoryboard().deliveryServiceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deliveryServiceVC' could not be loaded from storyboard 'DeliveryServiceStoryboard' as 'DeliveryServiceVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct deliveryTypeStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DeliveryTypeVC

      let bundle = R.hostingBundle
      let deliveryTypeVC = StoryboardViewControllerResource<DeliveryTypeVC>(identifier: "DeliveryTypeVC")
      let name = "DeliveryTypeStoryboard"

      func deliveryTypeVC(_: Void = ()) -> DeliveryTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deliveryTypeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Mask Group 24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Mask Group 24' is used in storyboard 'DeliveryTypeStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'DeliveryTypeStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in storyboard 'DeliveryTypeStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.deliveryTypeStoryboard().deliveryTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deliveryTypeVC' could not be loaded from storyboard 'DeliveryTypeStoryboard' as 'DeliveryTypeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct editProfileStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EditProfileVC

      let bundle = R.hostingBundle
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let name = "EditProfileStoryboard"

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in storyboard 'EditProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'EditProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'EditProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password' is used in storyboard 'EditProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo-camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo-camera' is used in storyboard 'EditProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash' is used in storyboard 'EditProfileStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'EditProfileStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.editProfileStoryboard().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'EditProfileStoryboard' as 'EditProfileVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct faqStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FaqVC

      let bundle = R.hostingBundle
      let faqVC = StoryboardViewControllerResource<FaqVC>(identifier: "FaqVC")
      let name = "FaqStoryboard"

      func faqVC(_: Void = ()) -> FaqVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: faqVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542' is used in storyboard 'FaqStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'FaqStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.faqStoryboard().faqVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'faqVC' could not be loaded from storyboard 'FaqStoryboard' as 'FaqVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct favoritesStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FavoritesVC

      let bundle = R.hostingBundle
      let favoritesVC = StoryboardViewControllerResource<FavoritesVC>(identifier: "FavoritesVC")
      let name = "FavoritesStoryboard"

      func favoritesVC(_: Void = ()) -> FavoritesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favoritesVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in storyboard 'FavoritesStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'FavoritesStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'FavoritesStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.favoritesStoryboard().favoritesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favoritesVC' could not be loaded from storyboard 'FavoritesStoryboard' as 'FavoritesVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct forgetPasswordStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ForgetPasswordVC

      let bundle = R.hostingBundle
      let forgetPasswordVC = StoryboardViewControllerResource<ForgetPasswordVC>(identifier: "ForgetPasswordVC")
      let name = "ForgetPasswordStoryboard"

      func forgetPasswordVC(_: Void = ()) -> ForgetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgetPasswordVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'ForgetPasswordStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'ForgetPasswordStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor1' is used in storyboard 'ForgetPasswordStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'ForgetPasswordStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'ForgetPasswordStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'ForgetPasswordStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'ForgetPasswordStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.forgetPasswordStoryboard().forgetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'ForgetPasswordStoryboard' as 'ForgetPasswordVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct homeStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let name = "HomeStoryboard"

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542' is used in storyboard 'HomeStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Home' is used in storyboard 'HomeStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Search' is used in storyboard 'HomeStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "microphone-black-shape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'microphone-black-shape' is used in storyboard 'HomeStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shopping-bag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shopping-bag' is used in storyboard 'HomeStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'HomeStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'HomeStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.homeStoryboard().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'HomeStoryboard' as 'HomeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct imageDisplayController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let imageDisplayController = StoryboardViewControllerResource<ImageDisplayController>(identifier: "ImageDisplayController")
      let name = "ImageDisplayController"

      func imageDisplayController(_: Void = ()) -> ImageDisplayController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imageDisplayController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.imageDisplayController().imageDisplayController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imageDisplayController' could not be loaded from storyboard 'ImageDisplayController' as 'ImageDisplayController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct langIntroStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let langIntroVC = StoryboardViewControllerResource<LangIntroVC>(identifier: "LangIntroVC")
      let name = "LangIntroStoryboard"

      func langIntroVC(_: Void = ()) -> LangIntroVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: langIntroVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2643", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2643' is used in storyboard 'LangIntroStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2644", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2644' is used in storyboard 'LangIntroStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'LangIntroStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logoName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoName' is used in storyboard 'LangIntroStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'LangIntroStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'LangIntroStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'LangIntroStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondTextColor' is used in storyboard 'LangIntroStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.langIntroStoryboard().langIntroVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'langIntroVC' could not be loaded from storyboard 'LangIntroStoryboard' as 'LangIntroVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct languageStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LanguageVC

      let bundle = R.hostingBundle
      let languageVC = StoryboardViewControllerResource<LanguageVC>(identifier: "LanguageVC")
      let name = "LanguageStoryboard"

      func languageVC(_: Void = ()) -> LanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542' is used in storyboard 'LanguageStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2636", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2636' is used in storyboard 'LanguageStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2637", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2637' is used in storyboard 'LanguageStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'LanguageStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'LanguageStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'LanguageStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondTextColor' is used in storyboard 'LanguageStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.languageStoryboard().languageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageVC' could not be loaded from storyboard 'LanguageStoryboard' as 'LanguageVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Burger", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Burger' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LogoNameWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LogoNameWhite' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lunchScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lunchScreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct locationFromMapStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LocationFromMapVC

      let bundle = R.hostingBundle
      let locationFromMapVC = StoryboardViewControllerResource<LocationFromMapVC>(identifier: "LocationFromMapVC")
      let name = "LocationFromMapStoryboard"

      func locationFromMapVC(_: Void = ()) -> LocationFromMapVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: locationFromMapVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'LocationFromMapStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "locationNVGIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'locationNVGIcon' is used in storyboard 'LocationFromMapStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'LocationFromMapStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.locationFromMapStoryboard().locationFromMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'locationFromMapVC' could not be loaded from storyboard 'LocationFromMapStoryboard' as 'LocationFromMapVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct loginStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "LoginStoryboard"

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Layer 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Layer 2-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2-1' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Layer 2-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2-2' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logoName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoName' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondTextColor' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadowColorYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadowColorYellow' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.loginStoryboard().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'LoginStoryboard' as 'LoginVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct makeOrderDoneStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MakeOrderDoneVC

      let bundle = R.hostingBundle
      let makeOrderDoneVC = StoryboardViewControllerResource<MakeOrderDoneVC>(identifier: "MakeOrderDoneVC")
      let name = "MakeOrderDoneStoryboard"

      func makeOrderDoneVC(_: Void = ()) -> MakeOrderDoneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: makeOrderDoneVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2597", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2597' is used in storyboard 'MakeOrderDoneStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'MakeOrderDoneStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.makeOrderDoneStoryboard().makeOrderDoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'makeOrderDoneVC' could not be loaded from storyboard 'MakeOrderDoneStoryboard' as 'MakeOrderDoneVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mealDetailsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MealDetailsVC

      let bundle = R.hostingBundle
      let mealDetailsVC = StoryboardViewControllerResource<MealDetailsVC>(identifier: "MealDetailsVC")
      let name = "MealDetailsStoryboard"

      func mealDetailsVC(_: Void = ()) -> MealDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mealDetailsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "384427745a5c82ffe8adc3bcea0be560", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '384427745a5c82ffe8adc3bcea0be560' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PointScore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PointScore' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-white' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fire' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shopping-bag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shopping-bag' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tray-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tray-1' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "starEmptyColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'starEmptyColor' is used in storyboard 'MealDetailsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.mealDetailsStoryboard().mealDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mealDetailsVC' could not be loaded from storyboard 'MealDetailsStoryboard' as 'MealDetailsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mealExtrasStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MealExtrasVC

      let bundle = R.hostingBundle
      let mealExtrasVC = StoryboardViewControllerResource<MealExtrasVC>(identifier: "MealExtrasVC")
      let name = "MealExtrasStoryboard"

      func mealExtrasVC(_: Void = ()) -> MealExtrasVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mealExtrasVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon material-cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-cancel' is used in storyboard 'MealExtrasStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in storyboard 'MealExtrasStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.mealExtrasStoryboard().mealExtrasVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mealExtrasVC' could not be loaded from storyboard 'MealExtrasStoryboard' as 'MealExtrasVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mealFilterStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MealFilterVC

      let bundle = R.hostingBundle
      let mealFilterVC = StoryboardViewControllerResource<MealFilterVC>(identifier: "MealFilterVC")
      let name = "MealFilterStoryboard"

      func mealFilterVC(_: Void = ()) -> MealFilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mealFilterVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Layer 2-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2-3' is used in storyboard 'MealFilterStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in storyboard 'MealFilterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'MealFilterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'MealFilterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'MealFilterStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.mealFilterStoryboard().mealFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mealFilterVC' could not be loaded from storyboard 'MealFilterStoryboard' as 'MealFilterVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct menu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuNavigationController = StoryboardViewControllerResource<UISideMenuNavigationController>(identifier: "MenuNavigationController")
      let menuVC = StoryboardViewControllerResource<MenuVC>(identifier: "MenuVC")
      let name = "Menu"

      func menuNavigationController(_: Void = ()) -> UISideMenuNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuNavigationController)
      }

      func menuVC(_: Void = ()) -> MenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "076d506b2c5e606e82bf26462bf5f8e7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '076d506b2c5e606e82bf26462bf5f8e7' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2542-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542-1' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2661", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2661' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'Menu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.menu().menuNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuNavigationController' could not be loaded from storyboard 'Menu' as 'UISideMenuNavigationController'.") }
        if _R.storyboard.menu().menuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuVC' could not be loaded from storyboard 'Menu' as 'MenuVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct notificationsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NotificationsVC

      let bundle = R.hostingBundle
      let name = "NotificationsStoryboard"
      let notificationsVC = StoryboardViewControllerResource<NotificationsVC>(identifier: "NotificationsVC")

      func notificationsVC(_: Void = ()) -> NotificationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542' is used in storyboard 'NotificationsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Notification' is used in storyboard 'NotificationsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'NotificationsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.notificationsStoryboard().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'NotificationsStoryboard' as 'NotificationsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onBoardingStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OnBoardingVC

      let bundle = R.hostingBundle
      let name = "OnBoardingStoryboard"
      let onBoardingVC = StoryboardViewControllerResource<OnBoardingVC>(identifier: "OnBoardingVC")

      func onBoardingVC(_: Void = ()) -> OnBoardingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onBoardingVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'OnBoardingStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.onBoardingStoryboard().onBoardingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onBoardingVC' could not be loaded from storyboard 'OnBoardingStoryboard' as 'OnBoardingVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct orderDetailsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OrderDetailsVC

      let bundle = R.hostingBundle
      let name = "OrderDetailsStoryboard"
      let orderDetailsVC = StoryboardViewControllerResource<OrderDetailsVC>(identifier: "OrderDetailsVC")

      func orderDetailsVC(_: Void = ()) -> OrderDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDetailsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "076d506b2c5e606e82bf26462bf5f8e7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '076d506b2c5e606e82bf26462bf5f8e7' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "299b538d1d69ae20db0a83028ee65bda", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '299b538d1d69ae20db0a83028ee65bda' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon material-cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-cancel' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Calendar' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Location' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadowColorRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadowColorRed' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-3' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdColor' is used in storyboard 'OrderDetailsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.orderDetailsStoryboard().orderDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDetailsVC' could not be loaded from storyboard 'OrderDetailsStoryboard' as 'OrderDetailsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct ordersStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OrdersVC

      let bundle = R.hostingBundle
      let name = "OrdersStoryboard"
      let ordersVC = StoryboardViewControllerResource<OrdersVC>(identifier: "OrdersVC")

      func ordersVC(_: Void = ()) -> OrdersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ordersVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542' is used in storyboard 'OrdersStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Document", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Document' is used in storyboard 'OrdersStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'OrdersStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'OrdersStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.ordersStoryboard().ordersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ordersVC' could not be loaded from storyboard 'OrdersStoryboard' as 'OrdersVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct pickTimeController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PickTimeController"
      let pickTimeController = StoryboardViewControllerResource<PickTimeController>(identifier: "PickTimeController")

      func pickTimeController(_: Void = ()) -> PickTimeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickTimeController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'PickTimeController', but couldn't be loaded.") }
        }
        if _R.storyboard.pickTimeController().pickTimeController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickTimeController' could not be loaded from storyboard 'PickTimeController' as 'PickTimeController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct pickerViewHelper: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PickerViewHelper

      let bundle = R.hostingBundle
      let name = "PickerViewHelper"
      let pickerController = StoryboardViewControllerResource<PickerViewHelper>(identifier: "PickerController")

      func pickerController(_: Void = ()) -> PickerViewHelper? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickerController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.pickerViewHelper().pickerController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickerController' could not be loaded from storyboard 'PickerViewHelper' as 'PickerViewHelper'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileVC

      let bundle = R.hostingBundle
      let name = "ProfileStoryboard"
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")

      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2542", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2542' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2616", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2616' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2617", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2617' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Profile' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Wallet' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "editProfile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editProfile' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "myAddress", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'myAddress' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "points", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'points' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in storyboard 'ProfileStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.profileStoryboard().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'ProfileStoryboard' as 'ProfileVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct providerDetailsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProviderDetailsVC

      let bundle = R.hostingBundle
      let name = "ProviderDetailsStoryboard"
      let providerDetailsVC = StoryboardViewControllerResource<ProviderDetailsVC>(identifier: "ProviderDetailsVC")

      func providerDetailsVC(_: Void = ()) -> ProviderDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerDetailsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2620", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2620' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2621", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2621' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2622", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2622' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Location' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-white' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'heart' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "logo-small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo-small' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "points", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'points' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shopping-bag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shopping-bag' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unRedDot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unRedDot' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "welcome-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome-1' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-3' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'ProviderDetailsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.providerDetailsStoryboard().providerDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerDetailsVC' could not be loaded from storyboard 'ProviderDetailsStoryboard' as 'ProviderDetailsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct providerMealsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProviderMealsVC

      let bundle = R.hostingBundle
      let name = "ProviderMealsStoryboard"
      let providerMealsVC = StoryboardViewControllerResource<ProviderMealsVC>(identifier: "ProviderMealsVC")

      func providerMealsVC(_: Void = ()) -> ProviderMealsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerMealsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'ProviderMealsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'ProviderMealsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.providerMealsStoryboard().providerMealsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerMealsVC' could not be loaded from storyboard 'ProviderMealsStoryboard' as 'ProviderMealsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct providerRatesStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProviderRatesVC

      let bundle = R.hostingBundle
      let name = "ProviderRatesStoryboard"
      let providerRatesVC = StoryboardViewControllerResource<ProviderRatesVC>(identifier: "ProviderRatesVC")

      func providerRatesVC(_: Void = ()) -> ProviderRatesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerRatesVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in storyboard 'ProviderRatesStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'ProviderRatesStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in storyboard 'ProviderRatesStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'ProviderRatesStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.providerRatesStoryboard().providerRatesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerRatesVC' could not be loaded from storyboard 'ProviderRatesStoryboard' as 'ProviderRatesVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct reOrderStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ReOrderVC

      let bundle = R.hostingBundle
      let name = "ReOrderStoryboard"
      let reOrderVC = StoryboardViewControllerResource<ReOrderVC>(identifier: "ReOrderVC")

      func reOrderVC(_: Void = ()) -> ReOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reOrderVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Mask Group 23", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Mask Group 23' is used in storyboard 'ReOrderStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'ReOrderStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.reOrderStoryboard().reOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reOrderVC' could not be loaded from storyboard 'ReOrderStoryboard' as 'ReOrderVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct registerStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RegisterVC

      let bundle = R.hostingBundle
      let name = "RegisterStoryboard"
      let registerVC = StoryboardViewControllerResource<RegisterVC>(identifier: "RegisterVC")

      func registerVC(_: Void = ()) -> RegisterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Burger", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Burger' is used in storyboard 'RegisterStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LogoNameWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LogoNameWhite' is used in storyboard 'RegisterStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-white' is used in storyboard 'RegisterStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'RegisterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'RegisterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'RegisterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'RegisterStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.registerStoryboard().registerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerVC' could not be loaded from storyboard 'RegisterStoryboard' as 'RegisterVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct reservationDetailsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ReservationDetailsVC

      let bundle = R.hostingBundle
      let name = "ReservationDetailsStoryboard"
      let reservationDetailsVC = StoryboardViewControllerResource<ReservationDetailsVC>(identifier: "ReservationDetailsVC")

      func reservationDetailsVC(_: Void = ()) -> ReservationDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reservationDetailsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "076d506b2c5e606e82bf26462bf5f8e7", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '076d506b2c5e606e82bf26462bf5f8e7' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 2658", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2658' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Calendar' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Location' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadowColorRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadowColorRed' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-3' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in storyboard 'ReservationDetailsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.reservationDetailsStoryboard().reservationDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reservationDetailsVC' could not be loaded from storyboard 'ReservationDetailsStoryboard' as 'ReservationDetailsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct reservationTableDoneStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ReservationTableDoneVC

      let bundle = R.hostingBundle
      let name = "ReservationTableDoneStoryboard"
      let reservationTableDoneVC = StoryboardViewControllerResource<ReservationTableDoneVC>(identifier: "ReservationTableDoneVC")

      func reservationTableDoneVC(_: Void = ()) -> ReservationTableDoneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reservationTableDoneVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 2597", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 2597' is used in storyboard 'ReservationTableDoneStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'ReservationTableDoneStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.reservationTableDoneStoryboard().reservationTableDoneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reservationTableDoneVC' could not be loaded from storyboard 'ReservationTableDoneStoryboard' as 'ReservationTableDoneVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct reservationTableStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ReservationTableVC

      let bundle = R.hostingBundle
      let name = "ReservationTableStoryboard"
      let reservationTableVC = StoryboardViewControllerResource<ReservationTableVC>(identifier: "ReservationTableVC")

      func reservationTableVC(_: Void = ()) -> ReservationTableVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reservationTableVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon material-cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-cancel' is used in storyboard 'ReservationTableStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Layer 2-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Layer 2-3' is used in storyboard 'ReservationTableStoryboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'calendar' is used in storyboard 'ReservationTableStoryboard', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'ReservationTableStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'ReservationTableStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.reservationTableStoryboard().reservationTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reservationTableVC' could not be loaded from storyboard 'ReservationTableStoryboard' as 'ReservationTableVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct reservationTypeStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ReservationTypeVC

      let bundle = R.hostingBundle
      let name = "ReservationTypeStoryboard"
      let reservationTypeVC = StoryboardViewControllerResource<ReservationTypeVC>(identifier: "ReservationTypeVC")

      func reservationTypeVC(_: Void = ()) -> ReservationTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reservationTypeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Mask Group 24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Mask Group 24' is used in storyboard 'ReservationTypeStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'ReservationTypeStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-blue' is used in storyboard 'ReservationTypeStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.reservationTypeStoryboard().reservationTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reservationTypeVC' could not be loaded from storyboard 'ReservationTypeStoryboard' as 'ReservationTypeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct reservationsFilterStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ReservationsFilterVC

      let bundle = R.hostingBundle
      let name = "ReservationsFilterStoryboard"
      let reservationsFilterVC = StoryboardViewControllerResource<ReservationsFilterVC>(identifier: "ReservationsFilterVC")

      func reservationsFilterVC(_: Void = ()) -> ReservationsFilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reservationsFilterVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-down' is used in storyboard 'ReservationsFilterStoryboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'calendar' is used in storyboard 'ReservationsFilterStoryboard', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'ReservationsFilterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'ReservationsFilterStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'ReservationsFilterStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.reservationsFilterStoryboard().reservationsFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reservationsFilterVC' could not be loaded from storyboard 'ReservationsFilterStoryboard' as 'ReservationsFilterVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct reservationsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ReservationsVC

      let bundle = R.hostingBundle
      let name = "ReservationsStoryboard"
      let reservationsVC = StoryboardViewControllerResource<ReservationsVC>(identifier: "ReservationsVC")

      func reservationsVC(_: Void = ()) -> ReservationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reservationsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 58", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 58' is used in storyboard 'ReservationsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'ReservationsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'ReservationsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "WhiteColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'WhiteColor' is used in storyboard 'ReservationsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'ReservationsStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'ReservationsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.reservationsStoryboard().reservationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reservationsVC' could not be loaded from storyboard 'ReservationsStoryboard' as 'ReservationsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct resetPasswordStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ResetPasswordVC

      let bundle = R.hostingBundle
      let name = "ResetPasswordStoryboard"
      let resetPasswordVC = StoryboardViewControllerResource<ResetPasswordVC>(identifier: "ResetPasswordVC")

      func resetPasswordVC(_: Void = ()) -> ResetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'ResetPasswordStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'ResetPasswordStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FourthColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FourthColor' is used in storyboard 'ResetPasswordStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'ResetPasswordStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'ResetPasswordStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.resetPasswordStoryboard().resetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordVC' could not be loaded from storyboard 'ResetPasswordStoryboard' as 'ResetPasswordVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct searchFilterStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchFilterVC

      let bundle = R.hostingBundle
      let name = "SearchFilterStoryboard"
      let searchFilterVC = StoryboardViewControllerResource<SearchFilterVC>(identifier: "SearchFilterVC")

      func searchFilterVC(_: Void = ()) -> SearchFilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchFilterVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainColor' is used in storyboard 'SearchFilterStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.searchFilterStoryboard().searchFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchFilterVC' could not be loaded from storyboard 'SearchFilterStoryboard' as 'SearchFilterVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct searchStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchVC

      let bundle = R.hostingBundle
      let name = "SearchStoryboard"
      let newSearchContainerVC = StoryboardViewControllerResource<NewSearchContainerVC>(identifier: "NewSearchContainerVC")
      let searchResultContainerVC = StoryboardViewControllerResource<SearchResultContainerVC>(identifier: "SearchResultContainerVC")
      let searchVC = StoryboardViewControllerResource<SearchVC>(identifier: "SearchVC")

      func newSearchContainerVC(_: Void = ()) -> NewSearchContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newSearchContainerVC)
      }

      func searchResultContainerVC(_: Void = ()) -> SearchResultContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchResultContainerVC)
      }

      func searchVC(_: Void = ()) -> SearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 58", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 58' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Iconly-Light-Search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Iconly-Light-Search' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appBackgroundWithoutAPPName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackgroundWithoutAPPName' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "microphone-black-shape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'microphone-black-shape' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor2' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor-3' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "thirdTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'thirdTextColor' is used in storyboard 'SearchStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.searchStoryboard().newSearchContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newSearchContainerVC' could not be loaded from storyboard 'SearchStoryboard' as 'NewSearchContainerVC'.") }
        if _R.storyboard.searchStoryboard().searchResultContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchResultContainerVC' could not be loaded from storyboard 'SearchStoryboard' as 'SearchResultContainerVC'.") }
        if _R.storyboard.searchStoryboard().searchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchVC' could not be loaded from storyboard 'SearchStoryboard' as 'SearchVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct verifyCodeStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = VerifyCodeVC

      let bundle = R.hostingBundle
      let name = "VerifyCodeStoryboard"
      let verifyCodeVC = StoryboardViewControllerResource<VerifyCodeVC>(identifier: "VerifyCodeVC")

      func verifyCodeVC(_: Void = ()) -> VerifyCodeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifyCodeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appBackground' is used in storyboard 'VerifyCodeStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'VerifyCodeStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor1' is used in storyboard 'VerifyCodeStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'VerifyCodeStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "secondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'secondColor' is used in storyboard 'VerifyCodeStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "textColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textColor' is used in storyboard 'VerifyCodeStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.verifyCodeStoryboard().verifyCodeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifyCodeVC' could not be loaded from storyboard 'VerifyCodeStoryboard' as 'VerifyCodeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct webViewStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WebViewStoryboard"
      let webViewVC = StoryboardViewControllerResource<WebViewVC>(identifier: "WebViewVC")

      func webViewVC(_: Void = ()) -> WebViewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-black' is used in storyboard 'WebViewStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'WebViewStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.webViewStoryboard().webViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewVC' could not be loaded from storyboard 'WebViewStoryboard' as 'WebViewVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
